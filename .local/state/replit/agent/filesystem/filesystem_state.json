{"file_contents":{"components/prompt-suggestions.tsx":{"content":"import { ArrowUpRight } from \"lucide-react\";\nimport { Button } from \"./ui/button\";\n\nconst suggestions = [\n  {\n    text: \"Bing\",\n    prompt: \"Otwórz przeglądarkę i włącz https://www.bing.com/?cc=pl\",\n  },\n  // {\n  //   text: \"search google for cute dogs\",\n  //   prompt: \"Launch browser and search Google for labradoodle puppies. Show me images.\",\n  // },\n  {\n    text: \"Oferta T-Mobile\",\n    prompt: \"Znajdź ofertę Magenta TV od T-Mobile'\",\n  },\n  // {\n  //   text: \"Check system memory usage\",\n  //   prompt: \"Run the top command to show system resource usage\",\n  // },\n  {\n    text: \"Github\",\n    prompt: \"Wejdź na Github\",\n  },\n  // {\n  //   text: \"What do you see\",\n  //   prompt:\n  //     \"Capture a screenshot of the current screen and tell me what you see\",\n  // },\n];\n\nexport const PromptSuggestions = ({\n  submitPrompt,\n  disabled,\n}: {\n  submitPrompt: (prompt: string) => void;\n  disabled: boolean;\n}) => {\n  return (\n    <div className=\"flex flex-wrap items-center gap-3 px-4\">\n      {suggestions.map((suggestion, index) => (\n        <Button\n          key={index}\n          variant=\"pill\"\n          size=\"pill\"\n          onClick={() => submitPrompt(suggestion.prompt)}\n          disabled={disabled}\n        >\n          <span>\n            <span className=\"text-black text-sm\">\n              {suggestion.text.toLowerCase()}\n            </span>\n          </span>\n          <ArrowUpRight className=\"ml-1 h-2 w-2 sm:h-3 sm:w-3 text-zinc-500 group-hover:opacity-70\" />\n        </Button>\n      ))}\n    </div>\n  );\n};\n","size_bytes":1529},"app/page.tsx":{"content":"\"use client\";\n\nimport { RealtimeMessage } from \"@/components/realtime-message\";\nimport { getDesktopURL } from \"@/lib/e2b/utils\";\nimport { useScrollToBottom } from \"@/lib/use-scroll-to-bottom\";\nimport { useRawStreaming } from \"@/lib/use-raw-streaming\";\nimport { useEffect, useState } from \"react\";\nimport { Input } from \"@/components/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { toast } from \"sonner\";\nimport { AISDKLogo } from \"@/components/icons\";\nimport { PromptSuggestions } from \"@/components/prompt-suggestions\";\nimport { ABORTED } from \"@/lib/utils\";\n\nexport default function Chat() {\n  const [desktopContainerRef, desktopEndRef] = useScrollToBottom();\n  const [mobileContainerRef, mobileEndRef] = useScrollToBottom();\n  const [isDesktopView, setIsDesktopView] = useState(false);\n\n  const [isInitializing, setIsInitializing] = useState(true);\n  const [streamUrl, setStreamUrl] = useState<string | null>(null);\n  const [sandboxId, setSandboxId] = useState<string | null>(null);\n\n  const {\n    messages,\n    input,\n    setInput,\n    handleSubmit,\n    isStreaming,\n    stop: originalStop,\n    send,\n  } = useRawStreaming({\n    api: \"/api/chat\",\n    body: {\n      sandboxId,\n    },\n    onError: (error) => {\n      console.error(error);\n      toast.error(\"There was an error\", {\n        description: \"Please try again later.\",\n        richColors: true,\n        position: \"top-center\",\n      });\n    },\n  });\n\n  // Wrap stop to also reset submitted state\n  const stop = () => {\n    setIsSubmitted(false);\n    originalStop();\n  };\n\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInput(e.target.value);\n  };\n\n  const handleFormSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!input.trim() || isStreaming || isInitializing) return;\n    setIsSubmitted(true);\n    handleSubmit(e);\n  };\n\n  // Reset submitted state when streaming starts or ends\n  useEffect(() => {\n    if (isStreaming) {\n      setIsSubmitted(false); // Reset when streaming actually starts\n    }\n  }, [isStreaming]);\n\n  const isLoading = isStreaming || isSubmitted;\n  const status = isStreaming ? \"streaming\" : isSubmitted ? \"submitted\" : \"ready\";\n\n  const refreshDesktop = async () => {\n    try {\n      setIsInitializing(true);\n      const { streamUrl, id } = await getDesktopURL(sandboxId || undefined);\n      // console.log(\"Refreshed desktop connection with ID:\", id);\n      setStreamUrl(streamUrl);\n      setSandboxId(id);\n    } catch (err) {\n      console.error(\"Failed to refresh desktop:\", err);\n    } finally {\n      setIsInitializing(false);\n    }\n  };\n\n  // Kill desktop on page close\n  useEffect(() => {\n    if (!sandboxId) return;\n\n    // Function to kill the desktop - just one method to reduce duplicates\n    const killDesktop = () => {\n      if (!sandboxId) return;\n\n      // Use sendBeacon which is best supported across browsers\n      navigator.sendBeacon(\n        `/api/kill-desktop?sandboxId=${encodeURIComponent(sandboxId)}`,\n      );\n    };\n\n    // Detect iOS / Safari\n    const isIOS =\n      /iPad|iPhone|iPod/.test(navigator.userAgent) ||\n      (navigator.platform === \"MacIntel\" && navigator.maxTouchPoints > 1);\n    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\n    // Choose exactly ONE event handler based on the browser\n    if (isIOS || isSafari) {\n      // For Safari on iOS, use pagehide which is most reliable\n      window.addEventListener(\"pagehide\", killDesktop);\n\n      return () => {\n        window.removeEventListener(\"pagehide\", killDesktop);\n        // Also kill desktop when component unmounts\n        killDesktop();\n      };\n    } else {\n      // For all other browsers, use beforeunload\n      window.addEventListener(\"beforeunload\", killDesktop);\n\n      return () => {\n        window.removeEventListener(\"beforeunload\", killDesktop);\n        // Also kill desktop when component unmounts\n        killDesktop();\n      };\n    }\n  }, [sandboxId]);\n\n  useEffect(() => {\n    const checkViewport = () => {\n      setIsDesktopView(window.innerWidth >= 1280);\n    };\n    \n    checkViewport();\n    window.addEventListener('resize', checkViewport);\n    return () => window.removeEventListener('resize', checkViewport);\n  }, []);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        setIsInitializing(true);\n        const { streamUrl, id } = await getDesktopURL(sandboxId ?? undefined);\n        setStreamUrl(streamUrl);\n        setSandboxId(id);\n      } catch (err) {\n        console.error(\"Failed to initialize desktop:\", err);\n        toast.error(\"Failed to initialize desktop\");\n      } finally {\n        setIsInitializing(false);\n      }\n    };\n\n    init();\n  }, []);\n\n  return (\n    <div className=\"flex h-dvh relative\">\n      {isDesktopView ? (\n        <div className=\"w-full flex h-full\">\n          <div className=\"w-96 flex flex-col border-r border-border\">\n            <div className=\"bg-background py-4 px-4 flex justify-between items-center\">\n              <AISDKLogo />\n            </div>\n\n            <div\n              className=\"flex-1 space-y-6 py-4 overflow-y-auto px-4\"\n              ref={desktopContainerRef}\n            >\n              {messages.map((message, i) => (\n                <RealtimeMessage\n                  message={message}\n                  key={message.id}\n                  isLoading={isLoading}\n                  status={status}\n                  isLatestMessage={i === messages.length - 1}\n                />\n              ))}\n              <div ref={desktopEndRef} className=\"pb-2\" />\n            </div>\n\n            {messages.length === 0 && (\n              <PromptSuggestions\n                disabled={isInitializing}\n                submitPrompt={(prompt: string) => {\n                  setIsSubmitted(true);\n                  send(prompt);\n                }}\n              />\n            )}\n            <div className=\"bg-background\">\n              <form onSubmit={handleFormSubmit} className=\"p-4\">\n                <Input\n                  handleInputChange={handleInputChange}\n                  input={input}\n                  isInitializing={isInitializing}\n                  isLoading={isLoading}\n                  status={status}\n                  stop={stop}\n                />\n              </form>\n            </div>\n          </div>\n\n          <div className=\"flex-1 bg-black relative flex items-center justify-center\">\n            {streamUrl ? (\n              <>\n                <iframe\n                  src={streamUrl}\n                  className=\"w-full h-full\"\n                  style={{\n                    transformOrigin: \"center\",\n                    width: \"100%\",\n                    height: \"100%\",\n                  }}\n                  allow=\"autoplay\"\n                />\n                <Button\n                  onClick={refreshDesktop}\n                  className=\"absolute top-2 right-2 bg-black/50 hover:bg-black/70 text-white px-3 py-1 rounded text-sm z-10\"\n                  disabled={isInitializing}\n                >\n                  {isInitializing ? \"Creating desktop...\" : \"New desktop\"}\n                </Button>\n              </>\n            ) : (\n              <div className=\"flex items-center justify-center h-full text-white\">\n                {isInitializing\n                  ? \"Initializing desktop...\"\n                  : \"Loading stream...\"}\n              </div>\n            )}\n          </div>\n        </div>\n      ) : (\n        <div className=\"w-full flex flex-col\">\n          <div className=\"bg-background py-4 px-4 flex justify-between items-center\">\n            <AISDKLogo />\n          </div>\n\n          <div\n            className=\"flex-1 space-y-6 py-4 overflow-y-auto px-4\"\n            ref={mobileContainerRef}\n          >\n            {messages.map((message, i) => (\n              <RealtimeMessage\n                message={message}\n                key={message.id}\n                isLoading={isLoading}\n                status={status}\n                isLatestMessage={i === messages.length - 1}\n              />\n            ))}\n            <div ref={mobileEndRef} className=\"pb-2\" />\n          </div>\n\n          {messages.length === 0 && (\n            <PromptSuggestions\n              disabled={isInitializing}\n              submitPrompt={(prompt: string) => {\n                setIsSubmitted(true);\n                send(prompt);\n              }}\n            />\n          )}\n          <div className=\"bg-background\">\n            <form onSubmit={handleFormSubmit} className=\"p-4\">\n              <Input\n                handleInputChange={handleInputChange}\n                input={input}\n                isInitializing={isInitializing}\n                isLoading={isLoading}\n                status={status}\n                stop={stop}\n              />\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":8936},"app/globals.css":{"content":"@font-face {\n  font-family: 'Inter';\n  src: url('/fonts/Inter-Regular.woff2') format('woff2');\n  font-weight: 400;\n  font-style: normal;\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'Inter';\n  src: url('/fonts/Inter-Medium.woff2') format('woff2');\n  font-weight: 500;\n  font-style: normal;\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'Inter';\n  src: url('/fonts/Inter-SemiBold.woff2') format('woff2');\n  font-weight: 600;\n  font-style: normal;\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'Inter';\n  src: url('/fonts/Inter-Bold.woff2') format('woff2');\n  font-weight: 700;\n  font-style: normal;\n  font-display: swap;\n}\n\n@import \"tailwindcss\";\n\n@plugin \"tailwindcss-animate\";\n@plugin \"@tailwindcss/typography\";\n\n@custom-variant dark (&:is(.dark *));\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --font-sans: 'Inter', ui-sans-serif, system-ui, sans-serif;\n  --font-mono: var(--font-geist-mono);\n  --color-sidebar-ring: var(--sidebar-ring);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar: var(--sidebar);\n  --color-chart-5: var(--chart-5);\n  --color-chart-4: var(--chart-4);\n  --color-chart-3: var(--chart-3);\n  --color-chart-2: var(--chart-2);\n  --color-chart-1: var(--chart-1);\n  --color-ring: var(--ring);\n  --color-input: var(--input);\n  --color-border: var(--border);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-destructive: var(--destructive);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-accent: var(--accent);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-muted: var(--muted);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-secondary: var(--secondary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-primary: var(--primary);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-popover: var(--popover);\n  --color-card-foreground: var(--card-foreground);\n  --color-card: var(--card);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n}\n\n:root {\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.141 0.005 285.823);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.141 0.005 285.823);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.141 0.005 285.823);\n  --primary: oklch(0.21 0.006 285.885);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.967 0.001 286.375);\n  --secondary-foreground: oklch(0.21 0.006 285.885);\n  --muted: oklch(0.967 0.001 286.375);\n  --muted-foreground: oklch(0.552 0.016 285.938);\n  --accent: oklch(0.967 0.001 286.375);\n  --accent-foreground: oklch(0.21 0.006 285.885);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(0.577 0.245 27.325);\n  --border: oklch(0.92 0.004 286.32);\n  --input: oklch(0.92 0.004 286.32);\n  --ring: oklch(0.705 0.015 286.067);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.141 0.005 285.823);\n  --sidebar-primary: oklch(0.21 0.006 285.885);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.967 0.001 286.375);\n  --sidebar-accent-foreground: oklch(0.21 0.006 285.885);\n  --sidebar-border: oklch(0.92 0.004 286.32);\n  --sidebar-ring: oklch(0.705 0.015 286.067);\n}\n\n.dark {\n  --background: oklch(0.141 0.005 285.823);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.141 0.005 285.823);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.141 0.005 285.823);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.985 0 0);\n  --primary-foreground: oklch(0.21 0.006 285.885);\n  --secondary: oklch(0.274 0.006 286.033);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.274 0.006 286.033);\n  --muted-foreground: oklch(0.705 0.015 286.067);\n  --accent: oklch(0.274 0.006 286.033);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.637 0.237 25.331);\n  --border: oklch(0.274 0.006 286.033);\n  --input: oklch(0.274 0.006 286.033);\n  --ring: oklch(0.442 0.017 285.786);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.21 0.006 285.885);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.274 0.006 286.033);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.274 0.006 286.033);\n  --sidebar-ring: oklch(0.442 0.017 285.786);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n    column-count: 1 !important;\n    columns: auto !important;\n    column-width: auto !important;\n  }\n  body {\n    @apply bg-background text-foreground;\n    font-family: 'Inter', ui-sans-serif, system-ui, sans-serif;\n  }\n  p, div, span, section, article {\n    column-count: 1 !important;\n    columns: auto !important;\n    column-width: auto !important;\n  }\n}\n\n.user-message-bubble {\n  padding: 8px 8px !important;\n  background-color: #ededed !important;\n  color: #1c1917 !important;\n  border-radius: 18px !important;\n  width: fit-content !important;\n  min-width: 0 !important;\n  max-width: 70% !important;\n  display: inline-block !important;\n  word-break: break-word !important;\n  white-space: pre-wrap !important;\n  margin: 0 !important;\n  text-align: center !important;\n  line-height: 1.5 !important;\n}\n","size_bytes":6120},"components/realtime-message.tsx":{"content":"\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport { PreviewMessage, type Message } from \"./message\";\n\ntype RealtimeMessageProps = {\n  message: Message;\n  status: \"error\" | \"submitted\" | \"streaming\" | \"ready\";\n  isLatestMessage: boolean;\n  isLoading: boolean;\n};\n\nexport function RealtimeMessage(props: RealtimeMessageProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const renderCountRef = useRef(0);\n\n  useEffect(() => {\n    // Zwiększ licznik przy każdej aktualizacji\n    renderCountRef.current++;\n    \n    // Wymuś natychmiastowe wyświetlenie przez zmianę GPU layer\n    if (containerRef.current) {\n      const timestamp = Date.now();\n      containerRef.current.style.setProperty('--update-time', String(timestamp));\n      \n      // Force repaint\n      void containerRef.current.offsetHeight;\n    }\n  }, [props.message, props.status]);\n\n  return (\n    <div \n      ref={containerRef} \n      style={{ \n        willChange: 'transform',\n        transform: 'translateZ(0)',\n        contain: 'layout'\n      }}\n      data-render-count={renderCountRef.current}\n    >\n      <PreviewMessage {...props} />\n    </div>\n  );\n}\n","size_bytes":1149},"components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"border-input file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[2px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n","size_bytes":950},"lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport const ABORTED = \"User aborted\";\n\nexport const prunedMessages = (messages: any[]): any[] => {\n  if (messages.at(-1)?.role === \"assistant\") {\n    return messages;\n  }\n\n  return messages.map((message) => {\n    // check if last message part is a tool invocation in a call state, then append a part with the tool result\n    message.parts = message.parts.map((part: any) => {\n      if (part.type === \"tool-invocation\") {\n        if (\n          part.toolInvocation.toolName === \"computer\" &&\n          part.toolInvocation.args.action === \"screenshot\"\n        ) {\n          return {\n            ...part,\n            toolInvocation: {\n              ...part.toolInvocation,\n              result: {\n                type: \"text\",\n                text: \"Image redacted to save input tokens\",\n              },\n            },\n          };\n        }\n        return part;\n      }\n      return part;\n    });\n    return message;\n  });\n};\n","size_bytes":1096},"STREAMING.md":{"content":"# Real-Time Streaming Configuration\n\n## 🎯 Cel\n\nTen dokument opisuje permanentną konfigurację real-time streamingu bez buforowania w aplikacji Comet Gemini.\n\n## ⚙️ Konfiguracja\n\nWszystkie ustawienia znajdują się w pliku `lib/streaming-config.ts`.\n\n### Kluczowe ustawienia\n\n```typescript\nexport const STREAMING_CONFIG = {\n  ENABLE_BUFFERING: false,              // ❌ Brak buforowania\n  ENABLE_MESSAGE_GROUPING: false,       // ❌ Brak grupowania\n  ENABLE_ARGUMENT_CHUNKING: false,      // ❌ Brak chunkowania\n  IMMEDIATE_PROCESSING: true,           // ✅ Natychmiastowe przetwarzanie\n}\n```\n\n## 🚫 ZAKAZY\n\n### NIE wolno:\n\n1. **Włączać buforowania** - każdy event musi być przetwarzany natychmiast\n2. **Grupować wiadomości** - każdy fragment jako osobny element\n3. **Dzielić argumentów na chunki** - wysyłaj kompletny JSON\n4. **Dodawać opóźnień** - brak setTimeout, brak await przed renderowaniem\n5. **Łączyć fragmentów** - nie akumuluj tekstu przed wyświetleniem\n\n## ✅ Implementacja\n\n### 1. useCustomChat.ts - Natychmiastowe przetwarzanie JSON Lines\n\n```typescript\n// ✅ POPRAWNIE - natychmiastowe przetwarzanie JSON Lines\nconst lines = buffer.split('\\n');\nbuffer = lines.pop() || ''; // Tylko niekompletna linia\n\nfor (const line of lines) {\n  if (!line.trim()) continue;\n  const data = JSON.parse(line); // Czysty JSON bez SSE prefix\n  // Natychmiastowa aktualizacja UI z flushSync\n  flushSync(() => setMessages(...));\n}\n```\n\n```typescript\n// ❌ ŹLE - buforowanie przed przetwarzaniem\nlet buffer = \"\";\nwhile (processedUpTo < buffer.length) {\n  // Czekanie na więcej danych\n}\n```\n\n### 2. app/api/chat/route.ts - JSON Lines format\n\n```typescript\n// ✅ POPRAWNIE - JSON Lines (każda linia = JSON + newline)\nconst sendEvent = (data: any) => {\n  const eventData = { ...data, timestamp: Date.now() };\n  const line = JSON.stringify(eventData) + '\\n'; // Czysty JSON Lines\n  controller.enqueue(encoder.encode(line));\n  \n  console.log(`[STREAM] Sent: ${data.type}`);\n};\n\n// Proste wywołania bez await\nsendEvent({\n  type: \"tool-argument-delta\",\n  delta: argsStr, // Kompletny JSON\n});\n```\n\n```typescript\n// ❌ ŹLE - SSE format z \"data: \" prefix\nconst encoded = encoder.encode(`data: ${JSON.stringify(eventData)}\\n\\n`);\n// To NIE jest JSON Lines!\n```\n\n### 3. components/message.tsx - Brak grupowania\n\n```typescript\n// ✅ POPRAWNIE - każda część osobno\n<>\n  {message.parts.map((part, index) => (\n    <div key={`${message.id}-${index}`}>\n      {/* Każda część jako osobny element */}\n    </div>\n  ))}\n</>\n```\n\n```typescript\n// ❌ ŹLE - grupowanie w kontener\n<div className=\"flex flex-col gap-3\">\n  {message.parts.map(...)}\n</div>\n```\n\n## 🔍 Walidacja\n\nPlik `lib/streaming-config.ts` zawiera funkcję `validateStreamingConfig()`, która sprawdza poprawność konfiguracji przy każdym imporcie.\n\n```typescript\n// Automatyczna walidacja\nvalidateStreamingConfig();\n```\n\nJeśli konfiguracja jest niepoprawna, aplikacja rzuci błąd przy starcie.\n\n## 📊 Architektura streamingu\n\n```\nServer (API)\n    ↓\nSSE Event (data: {...})\n    ↓ controller.enqueue + setImmediate (flush)\nBrowser otrzymuje event\n    ↓\nClient (useCustomChat)\n    ↓ split('\\n') - natychmiast\nParse line\n    ↓ flushSync + setMessages - natychmiast\nReact State\n    ↓ render - natychmiastowy DOM update\nUI (message.tsx)\n    ↓ GPU layer repaint\nPojedynczy element (bez grupowania)\n```\n\n**Każdy krok jest natychmiastowy - ZERO opóźnień, ZERO buforowania**\n\n## 🎯 Rezultat\n\n### Przed naprawą:\n- ❌ Buforowanie danych\n- ❌ Chunking po 10 znaków\n- ❌ Grupowanie wiadomości\n- ❌ Opóźnienia w wyświetlaniu\n\n### Po naprawie:\n- ✅ Real-time streaming\n- ✅ Zero buforowania\n- ✅ Brak grupowania\n- ✅ Natychmiastowe wyświetlanie\n\n## 📝 Historia zmian\n\n| Data | Zmiana | Plik |\n|------|--------|------|\n| 2025-10-03 | Usunięto buforowanie | `lib/use-custom-chat.ts` |\n| 2025-10-03 | Usunięto chunking argumentów | `app/api/chat/route.ts` |\n| 2025-10-03 | Usunięto grupowanie | `components/message.tsx` |\n| 2025-10-03 | Dodano optymalne nagłówki | `app/api/chat/route.ts` |\n| 2025-10-03 | Utworzono config | `lib/streaming-config.ts` |\n| 2025-10-15 | Wymuszenie flush przez setImmediate | `app/api/chat/route.ts` |\n| 2025-10-15 | Naprawa RealtimeMessage (usunięto zmienny key) | `components/realtime-message.tsx` |\n\n## 🔧 Troubleshooting\n\n### Problem: Wiadomości pojawiają się z opóźnieniem\n\n**Rozwiązanie:** Sprawdź czy nie ma buforowania w `useCustomChat.ts`\n\n### Problem: Argumenty narzędzi dzielą się na fragmenty\n\n**Rozwiązanie:** Sprawdź `ENABLE_ARGUMENT_CHUNKING` w konfiguracji\n\n### Problem: Wiadomości grupują się razem\n\n**Rozwiązanie:** Sprawdź `ENABLE_MESSAGE_GROUPING` w konfiguracji\n\n## 📚 Dodatkowe zasoby\n\n- Server-Sent Events (SSE) standard: https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events\n- React state updates: https://react.dev/learn/state-as-a-snapshot\n- HTTP streaming headers: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\n\n## ⚠️ WAŻNE\n\n**NIE MODYFIKUJ** pliku `lib/streaming-config.ts` bez pełnego zrozumienia konsekwencji. Każda zmiana może zepsuć real-time streaming.\n\nJeśli musisz coś zmienić, najpierw:\n1. Przeczytaj tę dokumentację\n2. Zrozum architekturę streamingu\n3. Przetestuj zmiany lokalnie\n4. Sprawdź czy walidacja przechodzi\n","size_bytes":5368},"app/api/kill-desktop/route.ts":{"content":"import { killDesktop } from \"@/lib/e2b/utils\";\n\n// Common handler for both GET and POST requests\nasync function handleKillDesktop(request: Request) {\n  // Enable CORS to ensure this works across all browsers\n\n  const { searchParams } = new URL(request.url);\n  const sandboxId = searchParams.get(\"sandboxId\");\n\n  console.log(`Kill desktop request received via ${request.method} for ID: ${sandboxId}`);\n\n  if (!sandboxId) {\n    return new Response(\"No sandboxId provided\", { status: 400 });\n  }\n\n  try {\n    await killDesktop(sandboxId);\n    return new Response(\"Desktop killed successfully\", { status: 200 });\n  } catch (error) {\n    console.error(`Failed to kill desktop with ID: ${sandboxId}`, error);\n    return new Response(\"Failed to kill desktop\", { status: 500 });\n  }\n}\n\n// Handle POST requests\nexport async function POST(request: Request) {\n  return handleKillDesktop(request);\n}","size_bytes":887},"components/prevent-chat-caching.tsx":{"content":"\"use client\";\n\nimport { useEffect } from \"react\";\n\nexport function PreventChatCaching() {\n  useEffect(() => {\n    if (typeof window === \"undefined\") return;\n\n    // PERMANENTLY BLOCK CHAT MESSAGE CACHING - NOT DELETION, JUST CACHING\n    \n    // Override localStorage.setItem to block chat-related keys from being cached\n    const originalLocalStorageSetItem = Storage.prototype.setItem;\n    Storage.prototype.setItem = function(key: string, value: string) {\n      const lowerKey = key.toLowerCase();\n      const chatKeywords = [\n        'chat', 'message', 'conversation', 'ai-', 'vercel', \n        'stream', 'history', 'dialog', 'assistant', 'prompt'\n      ];\n      \n      const isChatRelated = chatKeywords.some(keyword => lowerKey.includes(keyword));\n      \n      if (isChatRelated) {\n        console.warn(`[CHAT CACHE BLOCKED] Prevented caching of: ${key}`);\n        return; // Block caching, but don't delete from memory\n      }\n      \n      return originalLocalStorageSetItem.call(this, key, value);\n    };\n\n    // Override sessionStorage.setItem to block chat-related keys\n    const originalSessionStorageSetItem = sessionStorage.__proto__.setItem;\n    sessionStorage.__proto__.setItem = function(key: string, value: string) {\n      const lowerKey = key.toLowerCase();\n      const chatKeywords = [\n        'chat', 'message', 'conversation', 'ai-', 'vercel', \n        'stream', 'history', 'dialog', 'assistant', 'prompt'\n      ];\n      \n      const isChatRelated = chatKeywords.some(keyword => lowerKey.includes(keyword));\n      \n      if (isChatRelated) {\n        console.warn(`[CHAT CACHE BLOCKED] Prevented session caching of: ${key}`);\n        return;\n      }\n      \n      return originalSessionStorageSetItem.call(this, key, value);\n    };\n\n    // Block IndexedDB for chat data\n    if (window.indexedDB) {\n      const originalIDBOpen = indexedDB.open;\n      indexedDB.open = function(name: string, version?: number) {\n        const lowerName = name.toLowerCase();\n        const chatKeywords = ['chat', 'message', 'conversation', 'ai', 'vercel'];\n        \n        if (chatKeywords.some(keyword => lowerName.includes(keyword))) {\n          console.warn(`[CHAT CACHE BLOCKED] Prevented IndexedDB: ${name}`);\n          throw new Error(`Chat caching blocked for: ${name}`);\n        }\n        \n        if (version !== undefined) {\n          return originalIDBOpen.call(this, name, version);\n        }\n        return originalIDBOpen.call(this, name);\n      };\n    }\n\n    // Add headers to fetch requests for chat endpoints to prevent server-side caching\n    const originalFetch = window.fetch;\n    window.fetch = function(...args) {\n      const [resource, config] = args;\n      let url = '';\n      if (typeof resource === 'string') {\n        url = resource;\n      } else if (resource instanceof Request) {\n        url = resource.url;\n      } else if (resource instanceof URL) {\n        url = resource.toString();\n      }\n      \n      // Check if this is a chat-related API call\n      const isChatAPI = url.includes('/chat') || \n                        url.includes('/message') || \n                        url.includes('/conversation') ||\n                        url.includes('/api/chat');\n      \n      if (isChatAPI) {\n        const newConfig = {\n          ...config,\n          cache: \"no-store\" as RequestCache,\n          headers: {\n            ...((config && config.headers) || {}),\n            \"Cache-Control\": \"no-cache, no-store, must-revalidate, max-age=0\",\n            \"Pragma\": \"no-cache\",\n            \"Expires\": \"0\",\n            \"X-No-Cache\": \"true\",\n            \"X-Chat-No-Persist\": \"true\",\n          },\n        };\n        return originalFetch(resource, newConfig);\n      }\n      \n      return originalFetch(...args);\n    };\n\n    console.log('[CHAT CACHING BLOCKED] All chat message caching permanently disabled');\n\n  }, []);\n\n  return null;\n}\n","size_bytes":3857},"README.md":{"content":"<a href=\"https://ai-sdk-starter-groq.vercel.app\">\n  <h1 align=\"center\">AI SDK Computer Use Demo</h1>\n</a>\n\n<p align=\"center\">\n  An open-source AI chatbot app template demonstrating Google Gemini 2.5 Flash computer use capabilities, built with Next.js and the Google Generative AI SDK.\n</p>\n\n<p align=\"center\">\n  <a href=\"#features\"><strong>Features</strong></a> ·\n  <a href=\"#deploy-your-own\"><strong>Deploy Your Own</strong></a> ·\n  <a href=\"#running-locally\"><strong>Running Locally</strong></a> ·\n  <a href=\"#authors\"><strong>Authors</strong></a>\n</p>\n<br/>\n\n## Features\n\n- Streaming text responses powered by the [Google Generative AI SDK](https://ai.google.dev/gemini-api), with real-time function call argument streaming.\n- Integration with Google Gemini 2.5 Flash computer use tool and bash command capabilities.\n- Sandbox environment with [e2b](https://e2b.dev) for secure execution.\n- [shadcn/ui](https://ui.shadcn.com/) components for a modern, responsive UI powered by [Tailwind CSS](https://tailwindcss.com).\n- Built with the latest [Next.js](https://nextjs.org) App Router.\n\n## Deploy Your Own\n\nYou can deploy your own version to Vercel by clicking the button below:\n\n[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?project-name=Gemini+Computer+Use+Demo&repository-name=gemini-computer-use&repository-url=https%3A%2F%2Fgithub.com%2Fvercel-labs%2Fgemini-computer-use&demo-title=Gemini+Computer+Use+Demo&demo-url=https%3A%2F%2Fgemini-computer-use.vercel.app%2F&demo-description=A+chatbot+application+built+with+Next.js+demonstrating+Google+Gemini+2.5+Flash+computer+use+capabilities&env=GOOGLE_API_KEY,E2B_API_KEY)\n\n## Running Locally\n\n1. Clone the repository and install dependencies:\n\n   ```bash\n   npm install\n   # or\n   yarn install\n   # or\n   pnpm install\n   ```\n\n2. Install the [Vercel CLI](https://vercel.com/docs/cli):\n\n   ```bash\n   npm i -g vercel\n   # or\n   yarn global add vercel\n   # or\n   pnpm install -g vercel\n   ```\n\n   Once installed, link your local project to your Vercel project:\n\n   ```bash\n   vercel link\n   ```\n\n   After linking, pull your environment variables:\n\n   ```bash\n   vercel env pull\n   ```\n\n   This will create a `.env.local` file with all the necessary environment variables.\n\n3. Run the development server:\n\n   ```bash\n   npm run dev\n   # or\n   yarn dev\n   # or\n   pnpm dev\n   ```\n\n4. Open [http://localhost:3000](http://localhost:3000) to view your new AI chatbot application.\n\n## Authors\n\nThis repository is maintained by the [Vercel](https://vercel.com) team and community contributors.\n\nContributions are welcome! Feel free to open issues or submit pull requests to enhance functionality or fix bugs.\n","size_bytes":2688},"BLOKOWANIE-CACHE.md":{"content":"# Całkowite blokowanie Next.js Cache\n\n## Zaimplementowane rozwiązania\n\n### 1. **next.config.ts** - Konfiguracja Next.js\nDodano następujące ustawienia, które blokują cache na poziomie konfiguracji:\n\n- **`generateBuildId`** - Generuje unikalny ID przy każdym buildzie, uniemożliwiając wykorzystanie cache\n- **`images.unoptimized: true`** - Wyłącza optymalizację obrazów i ich cache\n- **`onDemandEntries`** - Ustawia na 0, aby wyłączyć buforowanie wpisów\n\n### 2. **disable-next-cache.js** - Aktywna blokada folderu cache\nSkrypt, który:\n\n- ✅ Usuwa folder `.next/cache` jeśli istnieje\n- ✅ Tworzy PLIK zamiast folderu o nazwie `cache` w `.next/`\n- ✅ Ustawia uprawnienia na 000 (brak dostępu)\n- ✅ Monitoruje co 100ms i blokuje próby utworzenia folderu\n- ✅ Działa w tle podczas uruchamiania Next.js\n\n### 3. **package.json** - Nowe komendy\n\nDodano następujące skrypty:\n\n```bash\n# Uruchom serwer deweloperski z blokowaniem cache\nnpm run dev:no-cache\n\n# Build z blokowaniem cache\nnpm run build:no-cache\n\n# Uruchom tylko skrypt blokujący (w tle)\nnpm run block-cache\n```\n\n## Jak używać\n\n### Opcja 1: Automatyczne blokowanie podczas startu\n```bash\nnpm run dev:no-cache\n```\n\n### Opcja 2: Ręczne uruchomienie skryptu blokującego\n```bash\n# W jednym terminalu\nnode disable-next-cache.js\n\n# W drugim terminalu\nnpm run dev\n```\n\n### Opcja 3: Tylko konfiguracja (bez aktywnego skryptu)\nObecna konfiguracja w `next.config.ts` już znacząco ogranicza cache - możesz użyć standardowego:\n```bash\nnpm run dev\n```\n\n## Co zostało zablokowane\n\n✅ Folder `.next/cache` - całkowicie uniemożliwiony  \n✅ ISR (Incremental Static Regeneration) cache  \n✅ Cache obrazów  \n✅ Build cache  \n✅ On-demand entries cache  \n\n## Uwaga\n\n⚠️ Wyłączenie cache może **znacząco spowolnić** działanie aplikacji, szczególnie podczas:\n- Buildów produkcyjnych\n- Hot reload podczas developmentu\n- Optymalizacji obrazów\n\nUżywaj tych rozwiązań tylko jeśli cache rzeczywiście powoduje problemy w Twoim projekcie.\n\n## Weryfikacja\n\nAby sprawdzić czy cache jest zablokowany:\n\n1. Uruchom `npm run dev:no-cache`\n2. Sprawdź folder `.next/` - powinien istnieć PLIK `cache`, nie folder\n3. W konsoli zobaczysz: `🔒 Skrypt blokujący Next.js cache uruchomiony`\n","size_bytes":2269},"README-OPERATOR.md":{"content":"# Operator - Computer Use AI Assistant\n\n> Asystent AI kontrolujący komputer poprzez Next.js, E2B Desktop i Azure OpenAI\n\n## 📁 Struktura Projektu\n\n```\noperator/\n├── app/                    # Next.js App Router\n│   ├── api/               # API Routes\n│   │   ├── chat/         # Główny endpoint streamu\n│   │   ├── db-query/     # Zapytania do bazy\n│   │   ├── db-test/      # Testy bazy\n│   │   └── kill-desktop/ # Zabijanie sesji E2B\n│   ├── globals.css       # Style globalne\n│   ├── layout.tsx        # Layout aplikacji\n│   └── page.tsx          # Strona główna\n│\n├── components/            # Komponenty React\n│   ├── ui/               # Komponenty UI (shadcn)\n│   ├── message.tsx       # Renderowanie wiadomości\n│   ├── realtime-message.tsx  # Streaming w czasie rzeczywistym\n│   ├── input.tsx         # Input czatu\n│   └── ...               # Komponenty cache-busting\n│\n├── lib/                   # Biblioteki i utilities\n│   ├── e2b/              # Integracja E2B Desktop\n│   │   ├── tool.ts       # Definicja narzędzi computer\n│   │   └── utils.ts      # Utilities E2B\n│   ├── use-custom-chat.ts    # Hook czatu z flushSync\n│   ├── streaming-config.ts   # Konfiguracja streamingu\n│   └── utils.ts          # Ogólne utility\n│\n├── disable-next-cache.js  # Skrypt blokujący cache\n├── next.config.ts         # Konfiguracja Next.js (NO CACHE)\n├── middleware.ts          # Middleware cache control\n├── package.json           # Zależności\n└── .env.example          # Przykładowa konfiguracja\n\n```\n\n## 🚀 Instalacja\n\n### 1. Sklonuj kod\n\n```bash\ncd operator\nnpm install\n```\n\n### 2. Konfiguracja środowiska\n\nSkopiuj `.env.example` do `.env.local`:\n\n```bash\ncp .env.example .env.local\n```\n\nUzupełnij zmienne środowiskowe:\n\n```env\nAZURE_OPENAI_ENDPOINT=https://your-endpoint.cognitiveservices.azure.com/\nAZURE_OPENAI_API_KEY=twój-klucz-api\nAZURE_OPENAI_DEPLOYMENT=gpt-4.1-mini\nAZURE_API_VERSION=2024-12-01-preview\n\nE2B_API_KEY=twój-klucz-e2b\n```\n\n### 3. Uruchomienie\n\n```bash\nnpm run dev:no-cache    # Development z wyłączonym cache\nnpm run build:no-cache  # Build production bez cache\nnpm start               # Production server\n```\n\n## 🔥 Kluczowe Funkcje\n\n### ✅ Całkowite Wyłączenie Cache Next.js\n\n- **next.config.ts** - konfiguracja `no-store`\n- **disable-next-cache.js** - aktywny bloker `.next/cache`\n- **middleware.ts** - headers `Cache-Control: no-cache`\n- **package.json** - skrypty `dev:no-cache`, `build:no-cache`\n\n### ✅ Real-time Streaming (BEZ batchingu)\n\n- **flushSync** - synchroniczne renderowanie każdej delty tekstu\n- **JSON Lines** - streaming przez fetch (nie WebSocket)\n- **Node.js runtime** - prawdziwy stream (nie Edge)\n- Każda delta → natychmiastowe wyświetlenie (zero opóźnień)\n\n### ✅ Separacja Fragmentów\n\n- Każdy fragment tekstu → osobny element\n- Każda akcja (tool call) → osobny blok\n- Wizualne wskaźniki streamingu (migający kursor)\n\n## 📝 Dokumentacja\n\n- **BLOKOWANIE-CACHE.md** - System blokowania cache (PL)\n- **STREAMING.md** - Architektura streamingu\n- **CHANGES.md** - Historia zmian\n\n## 🛠 Stack Technologiczny\n\n- **Next.js 15** (App Router, Node.js runtime)\n- **React 19** (flushSync dla synchronicznego renderowania)\n- **Azure OpenAI** (GPT-4.1-mini z function calling)\n- **E2B Desktop** (Sandbox z GUI dla computer use)\n- **TypeScript** + **Tailwind CSS**\n- **shadcn/ui** (komponenty UI)\n\n## 🎯 Jak Działa\n\n1. **User** → wpisuje prompt w interfejsie czatu\n2. **Frontend** → `use-custom-chat.ts` wysyła request do `/api/chat`\n3. **Backend** → Azure OpenAI generuje response z tool calls\n4. **E2B Desktop** → wykonuje akcje computer (screenshot, click, type)\n5. **Streaming** → każda delta tekstu/akcji → `flushSync` → natychmiastowy render\n6. **No Cache** → każde odświeżenie strony = świeży stan (zero cache)\n\n## 🔒 Bezpieczeństwo\n\n⚠️ **UWAGA**: W folderze znajduje się hardkodowany klucz API Azure w `app/api/chat/route.ts`\n\nPrzed produkcją:\n1. Przenieś klucze do zmiennych środowiskowych\n2. Użyj `.env.local` (nigdy nie commituj!)\n3. Zaktualizuj kod aby używał `process.env.*`\n\n## 📦 Zależności\n\nGłówne paczki:\n- `next` - framework\n- `react` + `react-dom` - UI (flushSync!)\n- `openai` - Azure OpenAI SDK\n- `@e2b/code-interpreter` - E2B Desktop\n- `ai` - Vercel AI SDK (utils)\n- `tailwindcss` - styling\n\n## 🐛 Debug\n\nJeśli streaming nie działa:\n1. Sprawdź czy używasz `npm run dev:no-cache`\n2. Zweryfikuj `disable-next-cache.js` (powinien być aktywny)\n3. Zobacz logi w konsoli przeglądarki\n4. Upewnij się że folder `.next/cache` NIE istnieje\n\nJeśli fragmenty się łączą:\n1. Sprawdź `use-custom-chat.ts` - musi używać `flushSync`\n2. Zobacz `realtime-message.tsx` - każdy render powinien być natychmiastowy\n3. Zweryfikuj że backend wysyła oddzielne eventy (JSON Lines)\n\n## 📄 Licencja\n\nKod aplikacji - sprawdź LICENSE jeśli istnieje.\n\n---\n\n**Wersja**: 1.0  \n**Data**: Październik 2025  \n**Autor**: Operator AI Project\n","size_bytes":5196},"CHANGES.md":{"content":"# Naprawiony Real-Time Streaming w Aplikacji Comet - JSON Lines Format\n\n## ✅ Format: JSON Lines (NIE SSE)\n\n**Kluczowa zmiana:** Cała aplikacja używa **JSON Lines** zamiast Server-Sent Events (SSE).\n\n### JSON Lines vs SSE:\n- **SSE:** `data: {\"type\":\"text-delta\"}\\n\\n` (wymaga slice(6))\n- **JSON Lines:** `{\"type\":\"text-delta\"}\\n` (czysty JSON.parse)\n\n## Wprowadzone zmiany\n\n### 1. **lib/use-custom-chat.ts** - Prawdziwy real-time streaming bez buforowania\n\n**Przed:**\n- Skomplikowany system buforowania z wieloetapowym przetwarzaniem\n- Oczekiwanie na pełne chunki przed parsowaniem\n- Buforowanie danych przed wyświetleniem\n\n**Po:**\n- **Natychmiastowe przetwarzanie** - każda kompletna linia JSON Lines parsowana i wyświetlana natychmiast\n- **JSON Lines format** - czysty JSON bez SSE prefix (\"data: \")\n- **Uproszczony parsing** - split po `\\n` zamiast skomplikowanego bufora\n- **Zero buforowania** - każdy event renderowany w czasie rzeczywistym\n- Tylko niekompletne linie pozostają w buferze do czasu otrzymania reszty\n\n```typescript\n// Nowa implementacja - JSON Lines bez buforowania\nconst lines = buffer.split('\\n');\nbuffer = lines.pop() || ''; // Tylko niekompletna linia w buferze\n\nfor (const line of lines) {\n  if (!line.trim()) continue;\n  // Czysty JSON parse - BEZ slice(6)!\n  const data = JSON.parse(line);\n  // Natychmiastowa aktualizacja UI z flushSync\n  flushSync(() => setMessages(...));\n}\n```\n\n### 2. **app/api/chat/route.ts** - Eliminacja sztucznego chunkowania\n\n**Przed:**\n- Argumenty narzędzi były dzielone na fragmenty po 10 znaków\n- Sztuczne opóźnienia w wysyłaniu danych\n- Brak wymuszenia flush\n\n```typescript\n// Stary kod - sztuczne chunkowanie\nfor (let i = 0; i < argsStr.length; i += 10) {\n  sendEvent({\n    type: \"tool-argument-delta\",\n    delta: argsStr.slice(i, i + 10)\n  });\n}\n```\n\n**Po:**\n- **Kompletne argumenty** - cały JSON wysyłany jednorazowo\n- **Natychmiastowe wysyłanie** - każdy event jest enqueue'owany bez opóźnień\n- **Komentarze o real-time** - jasna dokumentacja intencji\n\n```typescript\n// Nowy kod - pełne argumenty bez chunkowania\nconst argsStr = JSON.stringify(parsedArgs);\nsendEvent({\n  type: \"tool-argument-delta\",\n  toolCallId: toolCallId,\n  delta: argsStr, // Cały JSON naraz\n  index: currentIndex\n});\n```\n\n### 3. **components/message.tsx** - USUNIĘCIE GRUPOWANIA\n\n**KLUCZOWA ZMIANA - Każdy fragment jako osobna wiadomość**\n\n**Przed:**\n```typescript\n// Grupowanie wszystkich części w jeden div\n<div className=\"flex flex-col gap-3\">\n  {message.parts.map((part, index) => {\n    // Wszystkie części w jednym kontenerze\n  })}\n</div>\n```\n\n**Po:**\n```typescript\n// BRAK GRUPOWANIA - każda część jako osobny element\n<>\n  {message.parts.map((part, index) => {\n    if (part.type === \"tool-invocation\") {\n      return <div key={`${message.id}-${index}`} className=\"group/message w-full\">\n        {renderToolInvocation(part, props)}\n      </div>;\n    } else if (part.type === \"text\") {\n      return <div key={`${message.id}-${index}`} className=\"group/message w-full\">\n        {/* Pojedyncza część tekstu */}\n      </div>;\n    }\n  })}\n</>\n```\n\n**Rezultat:**\n- ✅ **Każda akcja wyświetlana osobno** - nie ma grupowania w chunki\n- ✅ **Każdy fragment tekstu osobno** - nie łączy się w całość\n- ✅ **Natychmiastowe wyświetlanie** - fragment pojawia się zaraz po otrzymaniu\n- ✅ **Brak oczekiwania** - nie czeka na pełny chunk\n\n### 4. **Nagłówki HTTP** - Optymalizacja dla streamingu\n\n**Dodane/Zmienione nagłówki:**\n```typescript\n{\n  'Content-Type': 'text/event-stream; charset=utf-8',\n  'Cache-Control': 'no-cache, no-store, no-transform, must-revalidate',\n  'Connection': 'keep-alive',\n  'X-Accel-Buffering': 'no',           // Wyłącza buforowanie w nginx/proxy\n  'X-Content-Type-Options': 'nosniff',  // Bezpieczeństwo\n  'Transfer-Encoding': 'chunked',       // Chunked transfer dla streamingu\n}\n```\n\n### 5. **eslint.config.mjs** - Wyłączenie strict rules\n\nWyłączone reguły dla kompatybilności:\n- `@typescript-eslint/no-explicit-any: \"off\"`\n- `@typescript-eslint/no-unused-vars: \"off\"`\n- `prefer-const: \"off\"`\n\n### 6. **lib/utils.ts** - Naprawa typów\n\n- Usunięto nieistniejący import `UIMessage` z pakietu `ai`\n- Zastąpiono typami `any[]` dla kompatybilności\n- Dodano explicite typy dla parametrów funkcji\n\n## Zachowane elementy (zgodnie z wymaganiami)\n\n✅ **Hardcoded API Key** - `AIzaSyCNEuCVk-wno4QPWHf6aRSePotWqI18OVc` pozostał bez zmian  \n✅ **Temp URL** - Wszystkie URL i endpointy pozostały niezmienione  \n✅ **Logika biznesowa** - Cała funkcjonalność desktop, computer_use, bash_command bez zmian\n\n## Rezultat\n\n### Przed naprawą:\n- ❌ Buforowanie danych przed wyświetleniem\n- ❌ Sztuczne dzielenie argumentów na małe fragmenty\n- ❌ Opóźnienia w wyświetlaniu akcji\n- ❌ Oczekiwanie na pełne chunki\n- ❌ **Grupowanie wiadomości w jeden kontener**\n\n### Po naprawie:\n- ✅ **Real-time streaming** - każdy fragment wyświetlany natychmiast\n- ✅ **Zero buforowania** - dane renderowane w momencie otrzymania\n- ✅ **Asynchroniczne eventy** - permanentne real-time events\n- ✅ **Pojedyncze fragmenty** - wyświetlane bez oczekiwania na całość\n- ✅ **Prawdziwy SSE** - zgodnie ze standardem Server-Sent Events\n- ✅ **BRAK GRUPOWANIA** - każdy fragment jako osobna wiadomość, nigdy nie łączone w całość\n\n## Architektura streamingu\n\n```\nServer (API) → SSE Event → Client (useCustomChat) → React State → UI (message.tsx)\n     ↓              ↓                ↓                    ↓              ↓\n  Gemini      data: {...}      Parse line         setMessages      Render\n   Stream      (no buffer)    (immediate)        (immediate)      (no group)\n```\n\n**Każdy krok jest natychmiastowy - ZERO buforowania, ZERO grupowania**\n\n## Instrukcja uruchomienia\n\n```bash\ncd comet-clean\nnpm install\nnpm run dev\n```\n\nAplikacja będzie dostępna na `http://localhost:5000`\n\n## Build produkcyjny\n\n```bash\nnpm run build\nnpm start\n```\n\n## Technologie\n\n- **Next.js 15.2.1** - Framework React\n- **Google Gemini 2.5 Flash** - Model AI\n- **E2B Desktop** - Sandbox dla computer use\n- **Server-Sent Events (SSE)** - Real-time streaming bez buforowania\n\n## Podsumowanie zmian\n\n1. ✅ **Usunięto buforowanie** w useCustomChat\n2. ✅ **Usunięto chunkowanie** argumentów w API\n3. ✅ **Usunięto grupowanie** wiadomości w UI\n4. ✅ **Dodano optymalne nagłówki** dla streamingu\n5. ✅ **Wymuszenie natychmiastowego flush** - każdy event jest wysyłany natychmiastowo przez setImmediate\n6. ✅ **Poprawiono RealtimeMessage** - usunięto zmienny key który powodował problemy z renderowaniem\n7. ✅ **Wszystkie sendEvent z await** - synchroniczne wysyłanie eventów\n8. ✅ **Zachowano API key i URL** bez zmian\n9. ✅ **Build zakończony sukcesem** - aplikacja gotowa\n\n## Najnowsze poprawki (15.10.2025)\n\n### 7. **app/api/chat/route.ts** - Wymuszenie natychmiastowego wysyłania eventów\n\n**Problem:**\n- Eventy SSE były wysyłane synchronicznie ale mogły być buforowane przez środowisko wykonawcze\n- Brak wymuszenia flush po każdym evencie\n- Wszystkie eventy mogły być grupowane przez przeglądarkę\n\n**Rozwiązanie:**\n```typescript\n// sendEvent jest teraz async i wymusza natychmiastowe wysłanie\nconst sendEvent = async (data: any) => {\n  try {\n    const eventData = { ...data, timestamp: Date.now(), requestId };\n    const encoded = encoder.encode(`data: ${JSON.stringify(eventData)}\\n\\n`);\n    controller.enqueue(encoded);\n    \n    // KLUCZOWE: Wymuszenie natychmiastowego wysłania eventu\n    await new Promise(resolve => setImmediate(() => resolve(undefined)));\n  } catch (error) {\n    // Controller already closed, ignore\n  }\n};\n\n// Wszystkie wywołania używają await\nawait sendEvent({ type: \"text-delta\", delta: delta.content });\nawait sendEvent({ type: \"tool-call-start\", toolCallId });\n```\n\n**Rezultat:**\n- ✅ Każdy event jest wysyłany natychmiastowo bez buforowania\n- ✅ Yield control do event loop pozwala przeglądarce odebrać event\n- ✅ Prawdziwy real-time streaming - każda akcja widoczna na bieżąco\n\n### 8. **components/realtime-message.tsx** - Naprawa renderowania\n\n**Problem:**\n- Dynamiczny key `${props.message.id}-${Date.now()}` zmieniał się przy każdym renderze\n- React przebudowywał cały komponent zamiast go aktualizować\n- Możliwe opóźnienia w wyświetlaniu zmian\n\n**Rozwiązanie:**\n```typescript\n// Usunięto zmienny key, dodano wymuszone repaint\nexport function RealtimeMessage(props: RealtimeMessageProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const renderCountRef = useRef(0);\n\n  useEffect(() => {\n    renderCountRef.current++;\n    \n    if (containerRef.current) {\n      const timestamp = Date.now();\n      containerRef.current.style.setProperty('--update-time', String(timestamp));\n      void containerRef.current.offsetHeight; // Force repaint\n    }\n  }, [props.message, props.status]);\n\n  return (\n    <div \n      ref={containerRef} \n      style={{ \n        willChange: 'transform',\n        transform: 'translateZ(0)',\n        contain: 'layout'\n      }}\n      data-render-count={renderCountRef.current}\n    >\n      <PreviewMessage {...props} />\n    </div>\n  );\n}\n```\n\n**Rezultat:**\n- ✅ React aktualizuje komponent zamiast go przebudowywać\n- ✅ Wymuszony repaint przez GPU layer\n- ✅ Szybsze renderowanie zmian\n","size_bytes":9334},"components/project-info.tsx":{"content":"import { motion } from \"motion/react\";\nimport { VercelIcon } from \"./icons\";\nimport { ComputerIcon } from \"lucide-react\";\nimport Link from \"next/link\";\n\nexport const ProjectInfo = () => {\n  return (\n    <motion.div className=\"w-full px-4\">\n      <div className=\"rounded-lg border-border border p-6 flex flex-col gap-4 text-center text-base dark:text-zinc-400\">\n        <p className=\"flex flex-row justify-center gap-4 items-center text-zinc-900 dark:text-zinc-50\">\n          <VercelIcon size={16} />\n          <span>+</span>\n          <ComputerIcon />\n        </p>\n        <h3 className=\"text-center text-2xl font-bold\">Computer Use Agent</h3>\n        <p>\n          This demo showcases a Computer Use Agent built with the{\" \"}\n          <StyledLink href=\"https://sdk.vercel.ai\">AI SDK</StyledLink>,{\" \"}\n          <StyledLink href=\"https://ai.google.dev/gemini-api\">\n            Gemini 2.5 Flash\n          </StyledLink>\n          , and <StyledLink href=\"https://e2b.dev\">e2b desktop</StyledLink>.\n        </p>\n        <p>\n          {\" \"}\n          Learn more about{\" \"}\n          <Link\n            className=\"text-blue-500 dark:text-blue-400\"\n            href=\"https://sdk.vercel.ai/docs/guides/computer-use\"\n            target=\"_blank\"\n          >\n            Computer Use{\" \"}\n          </Link>\n          with the AI SDK.\n        </p>\n      </div>\n    </motion.div>\n  );\n};\n\nconst StyledLink = ({\n  children,\n  href,\n}: {\n  children: React.ReactNode;\n  href: string;\n}) => {\n  return (\n    <Link\n      className=\"text-blue-500 dark:text-blue-400\"\n      href={href}\n      target=\"_blank\"\n    >\n      {children}\n    </Link>\n  );\n};\n\nexport const DeployButton = () => {\n  return (\n    <Link\n      target=\"_blank\"\n      href={`https://vercel.com/new/clone?project-name=Gemini+Computer+Use+Demo&repository-name=gemini-computer-use&repository-url=https%3A%2F%2Fgithub.com%2Fvercel-labs%2Fgemini-computer-use&demo-title=Gemini+Computer+Use+Demo&demo-url=https%3A%2F%2Fgemini-computer-use.vercel.app%2F&demo-description=A+chatbot+application+built+with+Next.js+demonstrating+Google+Gemini+2.5+Flash+computer+use+capabilities&env=GOOGLE_API_KEY,E2B_API_KEY`}\n      className=\"flex flex-row gap-2 items-center bg-zinc-900 px-3 py-2 rounded-md text-zinc-50 hover:bg-zinc-950 dark:bg-zinc-100 dark:text-zinc-900 dark:hover:bg-zinc-50\"\n    >\n      <VercelIcon size={14} />\n      Deploy\n    </Link>\n  );\n};\n","size_bytes":2395},"app/api/chat/route.ts":{"content":"import { AzureOpenAI } from \"openai\";\nimport { killDesktop, getDesktop } from \"@/lib/e2b/utils\";\nimport { resolution } from \"@/lib/e2b/tool\";\n\n// Azure OpenAI Configuration - HARDCODED\nconst AZURE_ENDPOINT =\n  \"https://comet-mgoa592k-eastus2.cognitiveservices.azure.com/\";\nconst AZURE_API_KEY =\n  \"67aC4VorQgQo59BywjZEdUwVovO5FxDAirewMCe16rZFfhvMHCOUJQQJ99BJACHYHv6XJ3w3AAAAACOGTZno\";\nconst AZURE_DEPLOYMENT = \"gpt-5-chat\";\nconst AZURE_API_VERSION = \"2024-12-01-preview\";\n\n// KLUCZOWE: Używamy Node.js runtime zamiast Edge dla prawdziwego streamingu\nexport const runtime = 'nodejs';\nexport const maxDuration = 3600; // 1 godzina\nexport const dynamic = 'force-dynamic';\nexport const revalidate = 0;\n\nconst client = new AzureOpenAI({\n  deployment: AZURE_DEPLOYMENT,\n  apiKey: AZURE_API_KEY,\n  apiVersion: AZURE_API_VERSION,\n  baseURL: `${AZURE_ENDPOINT}openai/deployments/${AZURE_DEPLOYMENT}`,\n});\n\nconst INSTRUCTIONS = `# System Prompt - Operator AI\n\nJesteś Operatorem - zaawansowanym asystentem AI, który może bezpośrednio kontrolować komputer, aby wykonywać zadania użytkownika. Twoja rola to **proaktywne działanie** z pełną transparentnością. Zawsze Pisz w stylu bardziej osobistym i narracyjnym. Zamiast suchych i technicznych opisów, prowadź użytkownika przez działania w sposób ciepły, ludzki, opowiadający historię. Zwracaj się bezpośrednio do użytkownika, a nie jak robot wykonujący instrukcje. Twórz atmosferę towarzyszenia, a nie tylko raportowania. Mów w czasie teraźniejszym i używaj przyjaznych sformułowań. Twój styl ma być płynny, naturalny i przyjazny. Unikaj powtarzania wyrażeń technicznych i suchych komunikatów — jeśli musisz podać lokalizację kursora lub elementu, ubierz to w narrację.\n\nWAZNE!!!!: NIGDY NIE ZGADUJ WSPOLRZEDNYCH JEST TO BEZWZGLEDNIE ZAKAZANE\n\nZAPAMIETAJ!!!WAŻNE!!!:  Rozdzielczość desktop (Resolution): 1024 x 768 pikseli skala: 100%, format: 4 x 3 system: ubuntu 22.04 Oto współrzędne skrajnych punktów sandboxa (rozdzielczość: 1024 × 768 pikseli):\n\n📐 Skrajne punkty sandboxa:\nFormat współrzędnych: [X, Y]\n\nPodstawowe punkty:\nLewy górny róg: [0, 0]\nPrawy górny róg: [1023, 0]\nLewy dolny róg: [0, 767]\nPrawy dolny róg: [1023, 767]\nŚrodek ekranu: [512, 384]\nSkrajne granice:\nGóra: Y = 0 (cały górny brzeg)\nDół: Y = 767 (cały dolny brzeg)\nLewo: X = 0 (cała lewa krawędź)\nPrawo: X = 1023 (cała prawa krawędź)\nZakresy:\nX (poziomo): 0 → 1023 (lewo → prawo)\nY (pionowo): 0 → 767 (góra → dół)\nWażne: Y = 0 to GÓRA ekranu, a Y = 767 to DÓŁ. Współrzędne zawsze podawane w formacie [X, Y] - najpierw poziomo, potem pionowo.\n\n\n\n\nWAŻNE!!!!: MUSISZ BARDZO CZESTO ROBIC ZRZUTY EKRANU BY SPRAWDZAC STAN SANDBOXA - NAJLEPIEJ CO AKCJE!!! ZAWSZE PO KAZDEJ AKCJI ROB ZRZUT EKRANU MUSISZ KONTROLOWAC STAN SANDBOXA\n\nWAŻNE!!!!: ZAWSZE ZACZYNAJ KAZDEGO TASKA OD WYSLANIA WIADOMOSCI A PO WYSLANIU WIADOMOSCI MUSISZ ZROBIC PIERWSZY ZRZUT EKRANU BY SPRAWDZIC STAN DESKTOPA\n\nWAŻNE!!!!: PRZEGLADARKA ZNAJDUJE SIE POD IKONA GLOBU\n\n═══════════════════════════════════════════════════════════════════════════\n🎯 COORDINATE SANITY CHECKLIST - OBOWIĄZKOWE PRZED KAŻDYM KLIKNIĘCIEM!\n═══════════════════════════════════════════════════════════════════════════\n\n**PRZED każdym left_click, right_click, double_click, mouse_move MUSISZ:**\n\n1. **Określ REGION docelowy** (WYMAGANE w parametrze target_region):\n   - Pionowo: \"top\" (Y: 0-255), \"middle\" (Y: 256-511), \"bottom\" (Y: 512-767)\n   - Poziomo: \"left\" (X: 0-341), \"center\" (X: 342-682), \"right\" (X: 683-1023)\n   - Format: \"vertical-horizontal\" np. \"top-left\", \"middle-center\", \"bottom-right\"\n\n2. **Sprawdź LOGIKĘ współrzędnych:**\n   - Element NA GÓRZE ekranu → Y MUSI być MAŁY (0-255) - NIE 500+!\n   - Element NA DOLE ekranu → Y MUSI być DUŻY (512-767) - NIE 100!\n   - Element PO LEWEJ → X MUSI być MAŁY (0-341) - NIE 700!\n   - Element PO PRAWEJ → X MUSI być DUŻY (683-1023) - NIE 200!\n\n3. **Weryfikuj FORMAT [X, Y]:**\n   - ZAWSZE [X, Y] - poziomo, potem pionowo\n   - NIGDY [Y, X] - to najczęstszy błąd!\n   - X = lewo→prawo (0→1023)\n   - Y = góra→dół (0→767) - **Y=0 to GÓRA, nie dół!**\n\n4. **Celuj w CENTRUM elementu:**\n   - Nie klikaj w krawędzie\n   - Dla przycisków: środek tekstu\n   - Dla pól: środek pola\n\n**PRZYKŁAD POPRAWNEGO ROZUMOWANIA:**\n- Widzę przycisk u góry po lewej → Region: \"top-left\" → Y ≈ 100, X ≈ 150 → [150, 100] ✅\n- Widzę przycisk na dole po prawej → Region: \"bottom-right\" → Y ≈ 700, X ≈ 900 → [900, 700] ✅\n\n**CZĘSTE BŁĘDY - ABSOLUTNIE UNIKAJ:**\n❌ Pasek adresu (górę) → [60, 700] - ZŁE! Góra to MAŁY Y!\n✅ Pasek adresu (góra) → Region: \"top-center\", [512, 60] - DOBRZE!\n\n❌ Dock (dół) → [512, 40] - ZŁE! Dół to DUŻY Y!\n✅ Dock (dół) → Region: \"bottom-center\", [512, 740] - DOBRZE!\n\n═══════════════════════════════════════════════════════════════════════════ \n\n✳️ STYL I OSOBOWOŚĆ:\n\nPisz w stylu narracyjnym, osobistym i ciepłym. Zamiast technicznego raportowania, prowadź użytkownika w formie naturalnej rozmowy.\nTwoja osobowość jako AI to:\n\nPozytywna, entuzjastyczna, pomocna, wspierająca, ciekawska, uprzejma i zaangażowana.\nMasz w sobie życzliwość i lekkość, ale jesteś też uważna i skupiona na zadaniu.\nDajesz użytkownikowi poczucie bezpieczeństwa i komfortu — jak przyjaciel, który dobrze się zna na komputerach i z uśmiechem pokazuje, co robi.\n\nUżywaj przyjaznych sformułowań i naturalnego języka. Zamiast mówić jak automat („Kliknę w ikonę”, „320,80”), mów jak osoba („Zaraz kliknę pasek adresu, żebyśmy mogli coś wpisać”).\nTwój język ma być miękki, a narracja – płynna, oparta na teraźniejszości, swobodna.\nUnikaj powtarzania „klikam”, „widzę”, „teraz zrobię” — wplataj to w opowieść, nie raport.\n\nAbsolutnie nigdy nie pisz tylko czysto techniczno, robotycznie - zawsze opowiadaj aktywnie uzytkownikowi, mow cos do uzytkownika, opisuj mu co bedziesz robic, opowiadaj nigdy nie mow czysto robotycznie prowadz tez rozmowe z uzytknownikiem i nie pisz tylko na temat tego co wyjonujesz ale prowadz rowniez aktywna i zaangazowana konwersacje, opowiafaj tez cos uzytkownikowi \n\n\nWAŻNE: JEŚLI WIDZISZ CZARNY EKRAN ZAWSZE ODCZEKAJ CHWILE AZ SIE DESKTOP ZANIM RUSZYSZ DALEJ - NIE MOZESZ BEZ TEGO ZACZAC TASKA \n\nWAŻNE ZAWSZE CHWILE ODCZEKAJ PO WYKONANIU AKCJI]\n\n## Dostępne Narzędzia\n\n### 1. Narzędzie: computer\nSłuży do bezpośredniej interakcji z interfejsem graficznym komputera.\n\n**KRYTYCZNIE WAŻNE - FUNCTION CALLING:**\n- **KAŻDA akcja computer MUSI być wykonana jako function calling**\n- **NIGDY nie opisuj akcji tekstem** - zawsze używaj function call\n- **ZAKAZANE:** pisanie \"klikne w (100, 200)\" bez wywolania funkcji\n- **WYMAGANE:** wywolanie \\`computer_use\\` z odpowiednimi parametrami\n- Nie symuluj akcji - wykonuj je przez function calling!\n\n**Dostępne akcje:**\n- \\`screenshot\\` - wykonuje zrzut ekranu (używaj CZĘSTO)\n- \\`left_click\\` - klika w podane współrzędne [X, Y] - **MOŻESZ KLIKAĆ WSZĘDZIE! Absolutnie żadnych ograniczeń na współrzędne. Cały ekran jest dostępny.**\n- \\`double_click\\` - podwójne kliknięcie - **MOŻESZ KLIKAĆ WSZĘDZIE bez ograniczeń**\n- \\`right_click\\` - kliknięcie prawym przyciskiem - **MOŻESZ KLIKAĆ WSZĘDZIE bez ograniczeń**\n- \\`mouse_move\\` - przemieszcza kursor - **MOŻESZ RUSZAĆ KURSOR WSZĘDZIE bez ograniczeń**\n- \\`type\\` - wpisuje tekst\n- \\`key\\` - naciska klawisz (np. \"enter\", \"tab\", \"ctrl+c\")\n- \\`scroll\\` - przewija (direction: \"up\"/\"down\", scroll_amount: liczba kliknięć)\n- \\`left_click_drag\\` - przeciąga (start_coordinate + coordinate) - **MOŻESZ PRZECIĄGAĆ WSZĘDZIE bez ograniczeń**\n- \\`wait\\` - czeka określoną liczbę sekund (max 2s)\n\n**⚡ WAŻNE - KLIKANIE:**\n- NIE MA ŻADNYCH OGRANICZEŃ na współrzędne kliknięć\n- Możesz klikać w KAŻDE miejsce na ekranie: (0,0) do (max_width-1, max_height-1)\n- Nie unikaj żadnych obszarów ekranu - WSZYSTKO jest klikalne\n- Jeśli widzisz element na screenshocie - możesz w niego kliknąć BEZ ŻADNYCH WYJĄTKÓW\n\n**WERYFIKACJA PO AKCJI:**\n- WERYFIKUJ PO KLIKNIĘCIU: zawsze rób screenshot po kliknięciu żeby sprawdzić efekt\n- Jeśli chybione: przeanalizuj gdzie faktycznie kliknąłeś i popraw współrzędne\n\n### 2. Narzędzie: bash\nSłuży do wykonywania poleceń w terminalu Linux.\n\n**KRYTYCZNIE WAŻNE - FUNCTION CALLING:**\n- **KAŻDA komenda bash MUSI być wykonana jako function calling**\n- **NIGDY nie opisuj komendy tekstem** - zawsze używaj function call\n- **WYMAGANE:** wywolanie \\`bash_command\\` z parametrem command\n\n**Parametr:**\n- \\`command\\` - komenda bash do wykonania\n\n---\n\n## KLUCZOWE ZASADY DZIAŁANIA\n\nWAZNE!!! KAZDE ZADSNIE MUSISZ ZACZYNAC OD NAPISANIA WIADOMOSCI DOPIERO GDY NAPISZESZ WIADOMOSC MOZESZ WYKONAC PIERWSZY ZURZUT EKRANU \n\n### 📸 ZRZUTY EKRANU - PRIORYTET #1\n- **ZAWSZE** rozpoczynaj zadanie od napisania wiadomosci a nasteonie wykonania : PIERWSZEGO zrzutu ekranu\n- Rób zrzut ekranu **PRZED i PO każdej istotnej akcji**\n- Po kliknięciu, wpisaniu, nawigacji - **natychmiast rób screenshot**\n- Jeśli coś się ładuje - **poczekaj i zrób screenshot**\n- Nigdy nie zakładaj, że coś się udało - **ZAWSZE WERYFIKUJ screenshotem**\n- W trakcie jednego zadania rób minimum 3-5 zrzutów ekranu\n\n💬 KOMUNIKACJA KROK PO KROKU\n\nWZORZEC KOMUNIKACJI (OBOWIĄZKOWY + STYL NARRACYJNY):\n\n✳️ ZASADY STYLU:\n\nPisz w stylu bardziej osobistym i narracyjnym. Zamiast suchych i technicznych opisów, prowadź użytkownika przez działania w sposób ciepły, ludzki, opowiadający historię.\nZwracaj się bezpośrednio do użytkownika, jak do osoby, której towarzyszysz – nie jak robot wykonujący polecenia.\nTwórz atmosferę współpracy, ciekawości i zaangażowania, a nie tylko raportowania statusu.\nMów w czasie teraźniejszym i używaj przyjaznych sformułowań. Unikaj powtarzania suchych, technicznych komunikatów. Jeśli musisz podać pozycję kursora lub elementu, wpleć to naturalnie w narrację – bez podawania „współrzędnych” czy „kliknięć” w stylu debugowania.\n\n⸻\n\n📋 WZORZEC ZACHOWANIA:\n  1.    Zapowiedz krok\nOpowiedz użytkownikowi, co właśnie planujesz zrobić – krótko, po ludzku, bez zbędnej techniczności.\n  2.    Wykonaj TYLKO JEDNĄ akcję\nZrób jedno konkretne działanie. Nic więcej.\n  3.    Potwierdź\nDaj znać, że już to zrobiłaś/eś – swobodnie, ciepło, bez raportowania jak maszyna.\n  4.    Zweryfikuj efekt\nZrób zrzut ekranu i opisz, co się wydarzyło – naturalnie, jakbyś mówił/-a „na żywo”.\n  5.    Zaproponuj następny krok\nPodsumuj, powiedz co dalej, utrzymując narrację.\n\n⸻\n\n🧭 TEMPO I FORMA:\n  •     Jedna akcja na wiadomość. Zawsze.\n  •     Po każdej akcji zatrzymaj się i czekaj – nie wykonuj serii działań naraz.\n  •     Nie spiesz się – użytkownik ma nadążać i czuć się prowadzony.\n  •     Unikaj suchości i powtarzalności – każda wypowiedź ma brzmieć jak rozmowa.\n  •     Nigdy nie podawaj współrzędnych ani nazw akcji typu “left_click” w komunikacie do użytkownika. To ma być narracja, nie kod debugowania.\n\n\n### 🎯 STRATEGIA WYKONYWANIA ZADAŃ\n\n**ZAWSZE:**\n- Dziel złożone zadania na małe, konkretne kroki\n- Przed każdym krokiem jasno komunikuj, co zamierzasz zrobić\n- **WYKONUJ TYLKO JEDNĄ AKCJĘ, POTEM CZEKAJ**\n- Po każdym kroku weryfikuj wynik screenshotem\n- Działaj spokojnie, bez pośpiechu\n- Nie pytaj o pozwolenie - po prostu informuj i działaj\n\n**NIGDY:**\n- **NIGDY nie wykonuj więcej niż jednej akcji w jednej odpowiedzi**\n- Nie śpiesz się - każdy krok to osobna odpowiedź\n- Nie wykonuj akcji bez uprzedniego poinformowania\n- Nie pomijaj zrzutów ekranu \"dla przyspieszenia\"\n- Nie zakładaj, że coś zadziałało bez weryfikacji\n- **ABSOLUTNIE ZAKAZANE: wykonywanie kilku akcji naraz**\n\n### 🖥️ WYBÓR ODPOWIEDNIEGO NARZĘDZIA\n\n**PAMIĘTAJ: Wszystkie akcje TYLKO przez function calling!**\n\n**Preferuj \\`computer\\` (przez function calling \\`computer_use\\`) dla:**\n- Otwierania aplikacji (kliknięcie w ikony)\n- Nawigacji w przeglądarce\n- Interakcji z GUI\n- Wypełniania formularzy\n- Klikania przycisków\n\n**Używaj \\`bash\\` (przez function calling \\`bash_command\\`) tylko gdy:**\n- Musisz stworzyć/edytować pliki (mkdir, touch, echo)\n- Instalujesz oprogramowanie (apt install)\n- Uruchamiasz skrypty (python, node)\n- Wykonujesz operacje systemowe\n\n**WAŻNE:** \n- Jeśli przeglądarka otworzy się z kreatorem konfiguracji - ZIGNORUJ GO i przejdź do właściwego zadania\n- **Każda akcja MUSI być wykonana przez function calling - bez wyjątków!**\n\n---\n\n## STRUKTURA ODPOWIEDZI\n\nKażda Twoja odpowiedź powinna mieć strukturę:\n\n1. **Analiza sytuacji** - co widzisz na ekranie\n2. **Plan działania** - co zamierzasz zrobić\n3. **Wykonanie** - seria kroków z komunikacją\n4. **Weryfikacja** - screenshot i potwierdzenie wyniku\n5. **Następny krok** - co będzie dalej (lub zakończenie)\n\n---\n\n## PRZYKŁADOWY PRZEPŁYW PRACY\n\n\\`\\`\\`\n[SCREENSHOT na start]\n\n\"Widzę pulpit z ikonami. Muszę otworzyć przeglądarkę. \nWidzę ikonę Firefox w docku u dołu ekranu. Kliknę w nią.\"\n\n[LEFT_CLICK na ikonę]\n\n\"Kliknąłem w Firefox. Poczekam, aż przeglądarka się otworzy.\"\n\n[WAIT 3 sekundy]\n\n[SCREENSHOT]\n\n\"Przeglądarka się otworzyła. Widzę stronę startową Firefox. \nTeraz kliknę w pasek adresu, aby wpisać URL.\"\n\n[LEFT_CLICK na pasek adresu]\n\n\"Kliknąłem w pasek adresu. Teraz wpiszę adres.\"\n\n[TYPE \"example.com\"]\n\n\"Wpisałem adres. Nacisnę Enter, aby przejść do strony.\"\n\n[KEY \"enter\"]\n\n[WAIT 2 sekundy]\n\n[SCREENSHOT]\n\n\"Strona się załadowała. Widzę...\"\n\\`\\`\\`\n\n---\n\n## STANDARDY JAKOŚCI\n\n✅ **ROBISZ DOBRZE gdy:**\n- Informujesz przed każdą akcją\n- Robisz screenshoty przed i po akcjach\n- Weryfikujesz każdy krok\n- Komunikujesz się naturalnie i płynnie\n- Kontynuujesz zadanie do końca\n\n❌ **UNIKAJ:**\n- Wykonywania akcji \"w ciemno\"\n- Pomijania screenshotów\n- Zakładania, że coś zadziałało\n- Przerywania w połowie zadania\n- Pytania o pozwolenie (działaj proaktywnie)\n\n---\n\n## PAMIĘTAJ\n\nTwoje działania są w pełni przezroczyste. Użytkownik widzi każdą Twoją akcję i komunikat. Twoja rola to:\n- **Działać** proaktywnie\n- **Komunikować** każdy krok\n- **Weryfikować** każdy wynik\n- **Kontynuować** do zakończenia zadania\n\nJesteś autonomicznym operatorem komputera - działaj pewnie, ale zawsze z pełną transparentnością!`;\n\nconst tools = [\n  {\n    type: \"function\" as const,\n    function: {\n      name: \"computer_use\",\n      description:\n        \"Use the computer to perform actions like clicking, typing, taking screenshots, etc.\",\n      parameters: {\n        type: \"object\",\n        properties: {\n          action: {\n            type: \"string\",\n            description:\n              \"The action to perform. Must be one of: screenshot, left_click, double_click, right_click, mouse_move, type, key, scroll, left_click_drag, wait\",\n            enum: [\n              \"screenshot\",\n              \"left_click\",\n              \"double_click\",\n              \"right_click\",\n              \"mouse_move\",\n              \"type\",\n              \"key\",\n              \"scroll\",\n              \"left_click_drag\",\n              \"wait\",\n            ],\n          },\n          coordinate: {\n            type: \"array\",\n            items: { type: \"number\" },\n            description: \"X,Y coordinates for actions that require positioning. MUST be [X, Y] format (horizontal, then vertical). X: 0-1023, Y: 0-767. Remember: Y=0 is TOP of screen!\",\n          },\n          target_region: {\n            type: \"string\",\n            description: \"REQUIRED for click/move actions. Declare target region using format 'vertical-horizontal' (e.g., 'top-left', 'middle-center', 'bottom-right'). Vertical: top (Y:0-255), middle (Y:256-511), bottom (Y:512-767). Horizontal: left (X:0-341), center (X:342-682), right (X:683-1023). This is used to validate coordinates match the intended region.\",\n            enum: [\"top-left\", \"top-center\", \"top-right\", \"middle-left\", \"middle-center\", \"middle-right\", \"bottom-left\", \"bottom-center\", \"bottom-right\"],\n          },\n          text: {\n            type: \"string\",\n            description: \"Text to type or key to press\",\n          },\n          scroll_direction: {\n            type: \"string\",\n            description: \"Direction to scroll. Must be 'up' or 'down'\",\n            enum: [\"up\", \"down\"],\n          },\n          scroll_amount: {\n            type: \"number\",\n            description: \"Number of scroll clicks\",\n          },\n          start_coordinate: {\n            type: \"array\",\n            items: { type: \"number\" },\n            description: \"Start coordinates for drag operations\",\n          },\n          duration: {\n            type: \"number\",\n            description: \"Duration for wait action in seconds\",\n          },\n        },\n        required: [\"action\"],\n      },\n    },\n  },\n  {\n    type: \"function\" as const,\n    function: {\n      name: \"bash_command\",\n      description: \"Execute bash commands on the computer\",\n      parameters: {\n        type: \"object\",\n        properties: {\n          command: {\n            type: \"string\",\n            description: \"The bash command to execute\",\n          },\n        },\n        required: [\"command\"],\n      },\n    },\n  },\n];\n\nexport async function POST(req: Request) {\n  const {\n    messages,\n    sandboxId,\n    timestamp,\n    requestId,\n  }: {\n    messages: any[];\n    sandboxId: string;\n    timestamp?: number;\n    requestId?: string;\n  } = await req.json();\n\n  const encoder = new TextEncoder();\n  let isStreamClosed = false;\n  \n  const stream = new ReadableStream({\n    async start(controller) {\n      const sendEvent = (data: any) => {\n        if (isStreamClosed) {\n          return;\n        }\n        \n        try {\n          // JSON Lines format: JSON object + newline\n          const eventData = {\n            ...data,\n            timestamp: Date.now(),\n            requestId: requestId || \"unknown\",\n          };\n          const line = JSON.stringify(eventData) + '\\n';\n          controller.enqueue(encoder.encode(line));\n          \n          console.log(`[STREAM] Sent: ${data.type} at ${new Date().toISOString()}`);\n        } catch (error) {\n          console.error('[STREAM] Error:', error);\n        }\n      };\n\n      try {\n        const desktop = await getDesktop(sandboxId);\n\n      const chatHistory: any[] = [\n        {\n          role: \"system\",\n          content: INSTRUCTIONS,\n        },\n      ];\n\n      for (const msg of messages) {\n        if (msg.role === \"user\") {\n          chatHistory.push({\n            role: \"user\",\n            content: msg.content,\n          });\n        } else if (msg.role === \"assistant\") {\n          chatHistory.push({\n            role: \"assistant\",\n            content: msg.content,\n          });\n        }\n      }\n\n      while (true) {\n        const streamResponse = await client.chat.completions.create({\n          model: AZURE_DEPLOYMENT,\n          messages: chatHistory,\n          tools: tools,\n          stream: true,\n          parallel_tool_calls: false,\n          temperature: 1,\n          max_tokens: undefined, // Brak limitu tokenów - AI może generować dowolnie długie odpowiedzi\n        });\n\n        let fullText = \"\";\n        let toolCalls: any[] = [];\n        let toolCallsMap = new Map<\n          number,\n          { id: string; name: string; arguments: string }\n        >();\n\n        for await (const chunk of streamResponse) {\n          const delta = chunk.choices[0]?.delta;\n          if (!delta) continue;\n\n          if (delta.content) {\n            fullText += delta.content;\n            sendEvent({\n              type: \"text-delta\",\n              delta: delta.content,\n              id: \"default\",\n            });\n          }\n\n            if (delta.tool_calls) {\n              for (const toolCallDelta of delta.tool_calls) {\n                const index = toolCallDelta.index;\n\n                if (!toolCallsMap.has(index)) {\n                  const toolCallId =\n                    toolCallDelta.id || `call_${index}_${Date.now()}`;\n                  const toolName =\n                    toolCallDelta.function?.name === \"computer_use\"\n                      ? \"computer\"\n                      : \"bash\";\n\n                  toolCallsMap.set(index, {\n                    id: toolCallId,\n                    name: toolCallDelta.function?.name || \"\",\n                    arguments: \"\",\n                  });\n\n                  sendEvent({\n                    type: \"tool-call-start\",\n                    toolCallId: toolCallId,\n                    index: index,\n                  });\n\n                  if (toolCallDelta.function?.name) {\n                    sendEvent({\n                      type: \"tool-name-delta\",\n                      toolCallId: toolCallId,\n                      toolName: toolName,\n                      index: index,\n                    });\n                  }\n                }\n\n                const toolCall = toolCallsMap.get(index)!;\n\n                if (toolCallDelta.function?.arguments) {\n                  toolCall.arguments += toolCallDelta.function.arguments;\n\n                  sendEvent({\n                    type: \"tool-argument-delta\",\n                    toolCallId: toolCall.id,\n                    delta: toolCallDelta.function.arguments,\n                    index: index,\n                  });\n                }\n              }\n            }\n          }\n\n          toolCalls = Array.from(toolCallsMap.values());\n\n          if (toolCalls.length > 0) {\n            // WAŻNE: Wykonujemy TYLKO PIERWSZY tool call - AI dostaje wynik i może zdecydować co dalej\n            const firstToolCall = toolCalls[0];\n            \n            const assistantMessage: any = {\n              role: \"assistant\",\n              content: fullText || null,\n              tool_calls: [{\n                id: firstToolCall.id,\n                type: \"function\",\n                function: {\n                  name: firstToolCall.name,\n                  arguments: firstToolCall.arguments,\n                },\n              }],\n            };\n            chatHistory.push(assistantMessage);\n\n            // Wykonujemy tylko pierwszy tool call\n            const toolCall = firstToolCall;\n            const parsedArgs = JSON.parse(toolCall.arguments);\n            const toolName =\n              toolCall.name === \"computer_use\" ? \"computer\" : \"bash\";\n\n            sendEvent({\n              type: \"tool-input-available\",\n              toolCallId: toolCall.id,\n              toolName: toolName,\n              input: parsedArgs,\n            });\n\n            // Execute only the first tool call\n              const toolResult = await (async () => {\n                try {\n                  let resultData: any = { type: \"text\", text: \"\" };\n                  let resultText = \"\";\n\n                  if (toolCall.name === \"computer_use\") {\n                    const action = parsedArgs.action;\n\n                    // Walidacja współrzędnych dla akcji kliknięcia/przesuwania\n                    if ([\"left_click\", \"right_click\", \"double_click\", \"mouse_move\"].includes(action)) {\n                      const coordinate = parsedArgs.coordinate;\n                      const targetRegion = parsedArgs.target_region;\n\n                      if (!coordinate || coordinate.length !== 2) {\n                        throw new Error(`❌ BŁĄD WSPÓŁRZĘDNYCH: Brakujące lub nieprawidłowe współrzędne. Wymagany format: [X, Y] gdzie X=0-1023, Y=0-767.`);\n                      }\n\n                      const [x, y] = coordinate;\n\n                      // Sprawdzenie zakresu\n                      if (x < 0 || x > 1023 || y < 0 || y > 767) {\n                        throw new Error(`❌ BŁĄD WSPÓŁRZĘDNYCH: Współrzędne [${x}, ${y}] są poza zakresem ekranu! Zakres: X=0-1023, Y=0-767. Pamiętaj: Y=0 to GÓRA ekranu!`);\n                      }\n\n                      // Walidacja target_region\n                      if (!targetRegion) {\n                        throw new Error(`❌ BRAK target_region: Musisz podać target_region dla akcji ${action}. Użyj formatu 'vertical-horizontal' np. 'top-left', 'middle-center', 'bottom-right'.`);\n                      }\n\n                      // Określenie regionu na podstawie współrzędnych\n                      const actualVertical = y <= 255 ? \"top\" : y <= 511 ? \"middle\" : \"bottom\";\n                      const actualHorizontal = x <= 341 ? \"left\" : x <= 682 ? \"center\" : \"right\";\n                      const actualRegion = `${actualVertical}-${actualHorizontal}`;\n\n                      // Sprawdzenie zgodności\n                      if (actualRegion !== targetRegion) {\n                        const [declaredVert, declaredHoriz] = targetRegion.split('-');\n                        let errorMsg = `❌ NIEZGODNOŚĆ WSPÓŁRZĘDNYCH:\\n\\n`;\n                        errorMsg += `Zadeklarowałeś region: \"${targetRegion}\"\\n`;\n                        errorMsg += `Ale współrzędne [${x}, ${y}] znajdują się w regionie: \"${actualRegion}\"\\n\\n`;\n                        errorMsg += `ANALIZA BŁĘDU:\\n`;\n                        \n                        // Analiza pionowa (Y)\n                        if (declaredVert !== actualVertical) {\n                          errorMsg += `• BŁĄD PIONOWY: Zadeklarowałeś \"${declaredVert}\" ale Y=${y} to \"${actualVertical}\"\\n`;\n                          if (declaredVert === \"top\" && actualVertical !== \"top\") {\n                            errorMsg += `  → Dla \"top\" Y musi być 0-255 (mały Y bo to GÓRA!)\\n`;\n                          } else if (declaredVert === \"bottom\" && actualVertical !== \"bottom\") {\n                            errorMsg += `  → Dla \"bottom\" Y musi być 512-767 (duży Y bo to DÓŁ!)\\n`;\n                          } else if (declaredVert === \"middle\" && actualVertical !== \"middle\") {\n                            errorMsg += `  → Dla \"middle\" Y musi być 256-511\\n`;\n                          }\n                        }\n                        \n                        // Analiza pozioma (X)\n                        if (declaredHoriz !== actualHorizontal) {\n                          errorMsg += `• BŁĄD POZIOMY: Zadeklarowałeś \"${declaredHoriz}\" ale X=${x} to \"${actualHorizontal}\"\\n`;\n                          if (declaredHoriz === \"left\" && actualHorizontal !== \"left\") {\n                            errorMsg += `  → Dla \"left\" X musi być 0-341\\n`;\n                          } else if (declaredHoriz === \"right\" && actualHorizontal !== \"right\") {\n                            errorMsg += `  → Dla \"right\" X musi być 683-1023\\n`;\n                          } else if (declaredHoriz === \"center\" && actualHorizontal !== \"center\") {\n                            errorMsg += `  → Dla \"center\" X musi być 342-682\\n`;\n                          }\n                        }\n                        \n                        errorMsg += `\\nPOPRAWNE ZAKRESY:\\n`;\n                        errorMsg += `• top: Y=0-255, middle: Y=256-511, bottom: Y=512-767\\n`;\n                        errorMsg += `• left: X=0-341, center: X=342-682, right: X=683-1023\\n`;\n                        errorMsg += `\\nPRZYKŁADY POPRAWNYCH WSPÓŁRZĘDNYCH:\\n`;\n                        errorMsg += `• top-left: [170, 100], top-center: [512, 100], top-right: [850, 100]\\n`;\n                        errorMsg += `• middle-left: [170, 380], middle-center: [512, 380], middle-right: [850, 380]\\n`;\n                        errorMsg += `• bottom-left: [170, 650], bottom-center: [512, 650], bottom-right: [850, 650]\\n`;\n                        errorMsg += `\\n⚠️ PAMIĘTAJ: Y=0 to GÓRA ekranu, Y=767 to DÓŁ!\\n`;\n                        errorMsg += `⚠️ Format ZAWSZE [X, Y] - poziomo, potem pionowo!\\n`;\n                        \n                        throw new Error(errorMsg);\n                      }\n                    }\n\n                    switch (action) {\n                      case \"screenshot\": {\n                        const screenshot = await desktop.screenshot();\n                        \n                        // Metadata z siatką 3x3 do łatwiejszego określania współrzędnych\n                        const timestamp = new Date().toISOString();\n                        const width = resolution.x;\n                        const height = resolution.y;\n                        \n                        // Granice regionów\n                        const vBounds = { top: 255, middle: 511 }; // bottom to 512-767\n                        const hBounds = { left: 341, center: 682 }; // right to 683-1023\n                        \n                        resultText = `Screenshot taken at ${timestamp}\n\nSCREEN: ${width}×${height} pixels | Aspect ratio: 4:3 | Origin: (0,0) at TOP-LEFT\n⚠️  REMEMBER: Y=0 is at TOP, Y increases DOWNWARD (0→767)\n⚠️  FORMAT: [X, Y] - horizontal first, then vertical\n\n═══════════════════════════════════════════════════════════════════════\n🎯 3×3 GRID REFERENCE - Use this to pick coordinates accurately!\n═══════════════════════════════════════════════════════════════════════\n\n┌─────────────┬──────────────┬──────────────┐\n│  TOP-LEFT   │  TOP-CENTER  │  TOP-RIGHT   │\n│  Region     │  Region      │  Region      │\n│  X: 0-341   │  X: 342-682  │  X: 683-1023 │\n│  Y: 0-255   │  Y: 0-255    │  Y: 0-255    │\n│             │              │              │\n│  Example:   │  Example:    │  Example:    │\n│  [170, 128] │  [512, 128]  │  [853, 128]  │\n├─────────────┼──────────────┼──────────────┤\n│ MIDDLE-LEFT │MIDDLE-CENTER │ MIDDLE-RIGHT │\n│  Region     │  Region      │  Region      │\n│  X: 0-341   │  X: 342-682  │  X: 683-1023 │\n│  Y: 256-511 │  Y: 256-511  │  Y: 256-511  │\n│             │              │              │\n│  Example:   │  Example:    │  Example:    │\n│  [170, 384] │  [512, 384]  │  [853, 384]  │\n├─────────────┼──────────────┼──────────────┤\n│ BOTTOM-LEFT │BOTTOM-CENTER │ BOTTOM-RIGHT │\n│  Region     │  Region      │  Region      │\n│  X: 0-341   │  X: 342-682  │  X: 683-1023 │\n│  Y: 512-767 │  Y: 512-767  │  Y: 512-767  │\n│             │              │              │\n│  Example:   │  Example:    │  Example:    │\n│  [170, 640] │  [512, 640]  │  [853, 640]  │\n└─────────────┴──────────────┴──────────────┘\n\nKEY BOUNDARIES:\n• Vertical dividers: Y=255 (top/middle), Y=511 (middle/bottom)\n• Horizontal dividers: X=341 (left/center), X=682 (center/right)\n\nCORNER COORDINATES:\n• Top-left: (0, 0)        • Top-right: (1023, 0)\n• Bottom-left: (0, 767)   • Bottom-right: (1023, 767)\n• Center: (512, 384)\n\nWORKFLOW:\n1. Look at screenshot - identify element position\n2. Determine which of 9 regions it's in (e.g., \"top-left\")\n3. Use example coordinates as reference\n4. Adjust to center of actual element\n5. Set target_region parameter to match\n6. Double-check: Does Y value match vertical region? Does X match horizontal?`;\n                        \n                        resultData = {\n                          type: \"image\",\n                          data: Buffer.from(screenshot).toString(\"base64\"),\n                        };\n\n                        sendEvent({\n                          type: \"screenshot-update\",\n                          screenshot: Buffer.from(screenshot).toString(\"base64\"),\n                        });\n                        break;\n                      }\n                      case \"wait\": {\n                        // BRAK LIMITU - AI może czekać dowolnie długo\n                        const duration = parsedArgs.duration || 1;\n                        await new Promise((resolve) =>\n                          setTimeout(resolve, duration * 1000),\n                        );\n                        resultText = `Waited for ${duration} seconds`;\n                        resultData = { type: \"text\", text: resultText };\n                        break;\n                      }\n                      case \"left_click\": {\n                        const [x, y] = parsedArgs.coordinate;\n                        \n                        await desktop.leftClick(x, y);\n                        resultText = `Left clicked at coordinates (${x}, ${y})`;\n                        \n                        await new Promise((resolve) =>\n                          setTimeout(resolve, 1500),\n                        );\n                        resultData = { type: \"text\", text: resultText };\n                        break;\n                      }\n                      case \"double_click\": {\n                        const [x, y] = parsedArgs.coordinate;\n                        \n                        await desktop.moveMouse(x, y);\n                        await new Promise((resolve) => setTimeout(resolve, 200));\n                        await desktop.doubleClick();\n                        resultText = `Double clicked at coordinates (${x}, ${y})`;\n                        \n                        await new Promise((resolve) =>\n                          setTimeout(resolve, 1500),\n                        );\n                        resultData = { type: \"text\", text: resultText };\n                        break;\n                      }\n                      case \"right_click\": {\n                        const [x, y] = parsedArgs.coordinate;\n                        \n                        await desktop.rightClick(x, y);\n                        resultText = `Right clicked at coordinates (${x}, ${y})`;\n                        \n                        await new Promise((resolve) =>\n                          setTimeout(resolve, 1500),\n                        );\n                        resultData = { type: \"text\", text: resultText };\n                        break;\n                      }\n                      case \"mouse_move\": {\n                        const [x, y] = parsedArgs.coordinate;\n                        \n                        await desktop.moveMouse(x, y);\n                        resultText = `Moved mouse to ${x}, ${y}`;\n                        \n                        await new Promise((resolve) =>\n                          setTimeout(resolve, 500),\n                        );\n                        resultData = { type: \"text\", text: resultText };\n                        break;\n                      }\n                      case \"type\": {\n                        const textToType = parsedArgs.text;\n                        \n                        await desktop.write(textToType);\n                        resultText = `Typed: ${textToType}`;\n                        \n                        await new Promise((resolve) =>\n                          setTimeout(resolve, 500),\n                        );\n                        resultData = { type: \"text\", text: resultText };\n                        break;\n                      }\n                      case \"key\": {\n                        const keyToPress =\n                          parsedArgs.text === \"Return\"\n                            ? \"enter\"\n                            : parsedArgs.text;\n                        \n                        await desktop.press(keyToPress);\n                        resultText = `Pressed key: ${parsedArgs.text}`;\n                        \n                        await new Promise((resolve) =>\n                          setTimeout(resolve, 1500),\n                        );\n                        resultData = { type: \"text\", text: resultText };\n                        break;\n                      }\n                      case \"scroll\": {\n                        const direction = parsedArgs.scroll_direction as\n                          | \"up\"\n                          | \"down\";\n                        const amount = parsedArgs.scroll_amount || 3;\n                        \n                        await desktop.scroll(direction, amount);\n                        resultText = `Scrolled ${direction} by ${amount} clicks`;\n                        \n                        await new Promise((resolve) =>\n                          setTimeout(resolve, 1000),\n                        );\n                        resultData = { type: \"text\", text: resultText };\n                        break;\n                      }\n                      case \"left_click_drag\": {\n                        const [startX, startY] = parsedArgs.start_coordinate;\n                        const [endX, endY] = parsedArgs.coordinate;\n                        \n                        await desktop.drag([startX, startY], [endX, endY]);\n                        resultText = `Dragged from (${startX}, ${startY}) to (${endX}, ${endY})`;\n                        \n                        await new Promise((resolve) =>\n                          setTimeout(resolve, 1500),\n                        );\n                        resultData = { type: \"text\", text: resultText };\n                        break;\n                      }\n                      default: {\n                        resultText = `Unknown action: ${action}`;\n                        resultData = { type: \"text\", text: resultText };\n                        console.warn(\"Unknown action:\", action);\n                      }\n                    }\n\n                    sendEvent({\n                      type: \"tool-output-available\",\n                      toolCallId: toolCall.id,\n                      output: resultData,\n                    });\n\n                    return {\n                      tool_call_id: toolCall.id,\n                      role: \"tool\",\n                      content: resultText,\n                      image:\n                        action === \"screenshot\" ? resultData.data : undefined,\n                    };\n                  } else if (toolCall.name === \"bash_command\") {\n                    const commandResult = await desktop.commands.run(\n                      parsedArgs.command,\n                      { \n                        timeoutMs: 0 // 0 = BRAK LIMITU CZASU\n                      }\n                    );\n                    \n                    const output =\n                      commandResult.stdout ||\n                      commandResult.stderr ||\n                      \"(Command executed successfully with no output)\";\n\n                    sendEvent({\n                      type: \"tool-output-available\",\n                      toolCallId: toolCall.id,\n                      output: { type: \"text\", text: output },\n                    });\n\n                    return {\n                      tool_call_id: toolCall.id,\n                      role: \"tool\",\n                      content: output,\n                    };\n                  }\n                } catch (error) {\n                  console.error(\"Error executing tool:\", error);\n                  const errorMsg =\n                    error instanceof Error ? error.message : String(error);\n                  \n                  // Szczegółowy komunikat błędu dla AI z sugestiami\n                  let detailedError = `Error: ${errorMsg}`;\n                  \n                  if (errorMsg.includes('Failed to type')) {\n                    detailedError += '\\n\\nSuggestion: The text field might not be active. Try clicking on the text field first before typing.';\n                  } else if (errorMsg.includes('Failed to click') || errorMsg.includes('Failed to double click') || errorMsg.includes('Failed to right click')) {\n                    detailedError += '\\n\\nSuggestion: The click action failed. Take a screenshot to see what happened, then try clicking again.';\n                  } else if (errorMsg.includes('Failed to take screenshot')) {\n                    detailedError += '\\n\\nSuggestion: Screenshot failed. The desktop might be loading. Wait a moment and try again.';\n                  } else if (errorMsg.includes('Failed to press key')) {\n                    detailedError += '\\n\\nSuggestion: Key press failed. Make sure the correct window is focused.';\n                  } else if (errorMsg.includes('Failed to move mouse')) {\n                    detailedError += '\\n\\nSuggestion: Mouse movement failed. Try again.';\n                  } else if (errorMsg.includes('Failed to drag')) {\n                    detailedError += '\\n\\nSuggestion: Drag operation failed. Try again with different coordinates.';\n                  } else if (errorMsg.includes('Failed to scroll')) {\n                    detailedError += '\\n\\nSuggestion: Scroll failed. Make sure a scrollable window is active.';\n                  } else if (errorMsg.includes('Failed to execute bash')) {\n                    detailedError += '\\n\\nSuggestion: Bash command failed. Check the command syntax and try again.';\n                  }\n                  \n                  sendEvent({\n                    type: \"error\",\n                    errorText: errorMsg,\n                  });\n                  return {\n                    tool_call_id: toolCall.id,\n                    role: \"tool\",\n                    content: detailedError,\n                  };\n                }\n              })();\n\n              // Dodaj wynik bezpośrednio do historii (tylko jeden tool call)\n              // Jeśli narzędzie zwróciło obraz (screenshot), dodaj go jako wiadomość z obrazem\n              if (toolResult!.image) {\n                chatHistory.push({\n                  role: \"tool\",\n                  tool_call_id: toolResult!.tool_call_id,\n                  content: toolResult!.content,\n                });\n                \n                // Dodaj screenshot jako wiadomość użytkownika z obrazem dla AI\n                // Szczegółowe dane techniczne o screenshocie\n                const timestamp = new Date().toISOString();\n                const width = resolution.x;\n                const height = resolution.y;\n                const centerX = Math.floor(width / 2);\n                const centerY = Math.floor(height / 2);\n                \n                chatHistory.push({\n                  role: \"user\",\n                  content: [\n                    {\n                      type: \"text\",\n                      text: `SCREENSHOT DATA - Captured: ${timestamp}\n\nResolution: ${width} × ${height} pixels\nTotal Pixels: ${width * height} (${(width * height / 1000000).toFixed(2)} megapixels)\nAspect Ratio: ${(width / height).toFixed(4)}:1 (${width > height ? 'Landscape' : width < height ? 'Portrait' : 'Square'})\nDiagonal: ${Math.round(Math.sqrt(width * width + height * height))} pixels\nFormat: PNG (24-bit RGB / 32-bit RGBA, 8 bits per channel)\n\nCoordinate System:\n- Origin: (0, 0) at TOP-LEFT corner\n- X-axis: 0 to ${width - 1} (LEFT → RIGHT)\n- Y-axis: 0 to ${height - 1} (TOP → BOTTOM, inverted)\n- Center: (${centerX}, ${centerY})\n\nCorner Coordinates:\n- TOP-LEFT: (0, 0)\n- TOP-RIGHT: (${width - 1}, 0)\n- BOTTOM-LEFT: (0, ${height - 1})\n- BOTTOM-RIGHT: (${width - 1}, ${height - 1})\n\nEdge Midpoints:\n- TOP: (${centerX}, 0)\n- BOTTOM: (${centerX}, ${height - 1})\n- LEFT: (0, ${centerY})\n- RIGHT: (${width - 1}, ${centerY})\n\nNote: All coordinates are integers. Y increases DOWNWARD.`,\n                    },\n                    {\n                      type: \"image_url\",\n                      image_url: {\n                        url: `data:image/png;base64,${toolResult!.image}`,\n                      },\n                    },\n                  ],\n                });\n              } else {\n                chatHistory.push(toolResult!);\n              }\n          } else {\n            // AI finished without tool calls - add assistant message to history\n            if (fullText) {\n              chatHistory.push({\n                role: \"assistant\",\n                content: fullText,\n              });\n            }\n\n            // Send finish event\n            sendEvent({\n              type: \"finish\",\n              content: fullText,\n            });\n\n            // PRZERYWAMY pętlę - AI skończyło tę turę, nie generujemy kolejnych odpowiedzi\n            break;\n          }\n        }\n        \n        // Jeśli pętla zakończyła się normalnie, zamknij stream\n        if (!isStreamClosed) {\n          isStreamClosed = true;\n          controller.close();\n        }\n      } catch (error) {\n        console.error(\"Chat API error:\", error);\n        await killDesktop(sandboxId);\n        sendEvent({\n          type: \"error\",\n          errorText: String(error),\n        });\n        isStreamClosed = true;\n        controller.close();\n      }\n    },\n  });\n\n  return new Response(stream, {\n    headers: {\n      \"Content-Type\": \"text/plain; charset=utf-8\",\n      \"Cache-Control\": \"no-cache, no-store, no-transform, must-revalidate, max-age=0, s-maxage=0, private\",\n      \"Pragma\": \"no-cache\",\n      \"Expires\": \"0\",\n      \"X-Accel-Buffering\": \"no\",\n      \"X-Content-Type-Options\": \"nosniff\",\n      \"Connection\": \"keep-alive\",\n      \"Surrogate-Control\": \"no-store\",\n      \"CDN-Cache-Control\": \"no-store\",\n      \"Vercel-CDN-Cache-Control\": \"no-store\",\n      \"X-No-Chat-Cache\": \"true\",\n      \"Clear-Site-Data\": '\"cache\"',\n    },\n  });\n}\n","size_bytes":46206},"components/input.tsx":{"content":"\"use client\";\n\nimport * as React from \"react\";\n\ninterface InputProps {\n  input: string;\n  handleInputChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  isInitializing: boolean;\n  isLoading: boolean;\n  status: string;\n  stop: () => void;\n}\n\nconst SendIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" {...props}>\n    <path d=\"M12 5.25L12 18.75\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n    <path d=\"M18.75 12L12 5.25L5.25 12\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n  </svg>\n);\n\nexport const Input = ({\n  input,\n  handleInputChange,\n  isInitializing,\n  isLoading,\n  status,\n  stop,\n}: InputProps) => {\n  const textareaRef = React.useRef<HTMLTextAreaElement>(null);\n\n  React.useLayoutEffect(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = \"auto\";\n      const newHeight = Math.min(textarea.scrollHeight, 200);\n      textarea.style.height = `${newHeight}px`;\n    }\n  }, [input]);\n\n  const hasValue = input.trim().length > 0;\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      if (hasValue && !isInitializing && status !== \"streaming\" && status !== \"submitted\") {\n        const form = e.currentTarget.closest(\"form\");\n        if (form) {\n          form.requestSubmit();\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col rounded-[28px] p-2 shadow-sm transition-colors bg-white border dark:bg-[#303030] dark:border-transparent\">\n      <textarea\n        ref={textareaRef}\n        rows={1}\n        value={input}\n        onChange={handleInputChange}\n        onKeyDown={handleKeyDown}\n        placeholder=\"Message...\"\n        disabled={isLoading || isInitializing}\n        className=\"w-full resize-none border-0 bg-transparent p-3 text-foreground dark:text-white placeholder:text-muted-foreground dark:placeholder:text-gray-300 focus:ring-0 focus-visible:outline-none min-h-12\"\n      />\n\n      <div className=\"mt-0.5 p-1 pt-0\">\n        <div className=\"flex items-center justify-end gap-2\">\n            {status === \"streaming\" || status === \"submitted\" ? (\n              <button\n                type=\"button\"\n                onClick={stop}\n                className=\"flex h-8 w-8 items-center justify-center rounded-full bg-black text-white hover:bg-black/80 dark:bg-white dark:text-black dark:hover:bg-white/80 transition-colors\"\n              >\n                <div className=\"h-3 w-3 bg-white dark:bg-black rounded\"></div>\n                <span className=\"sr-only\">Stop</span>\n              </button>\n            ) : (\n              <button\n                type=\"submit\"\n                disabled={!hasValue || isInitializing}\n                className=\"flex h-8 w-8 items-center justify-center rounded-full bg-black text-white hover:bg-black/80 dark:bg-white dark:text-black dark:hover:bg-white/80 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n              >\n                <SendIcon className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Send message</span>\n              </button>\n            )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","size_bytes":3317},"components/icons.tsx":{"content":"import Link from \"next/link\";\n\nexport const BotIcon = () => {\n  return (\n    <svg\n      height=\"16\"\n      strokeLinejoin=\"round\"\n      viewBox=\"0 0 16 16\"\n      width=\"16\"\n      style={{ color: \"currentcolor\" }}\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M8.75 2.79933C9.19835 2.53997 9.5 2.05521 9.5 1.5C9.5 0.671573 8.82843 0 8 0C7.17157 0 6.5 0.671573 6.5 1.5C6.5 2.05521 6.80165 2.53997 7.25 2.79933V5H7C4.027 5 1.55904 7.16229 1.08296 10H0V13H1V14.5V16H2.5H13.5H15V14.5V13H16V10H14.917C14.441 7.16229 11.973 5 9 5H8.75V2.79933ZM7 6.5C4.51472 6.5 2.5 8.51472 2.5 11V14.5H13.5V11C13.5 8.51472 11.4853 6.5 9 6.5H7ZM7.25 11.25C7.25 12.2165 6.4665 13 5.5 13C4.5335 13 3.75 12.2165 3.75 11.25C3.75 10.2835 4.5335 9.5 5.5 9.5C6.4665 9.5 7.25 10.2835 7.25 11.25ZM10.5 13C11.4665 13 12.25 12.2165 12.25 11.25C12.25 10.2835 11.4665 9.5 10.5 9.5C9.5335 9.5 8.75 10.2835 8.75 11.25C8.75 12.2165 9.5335 13 10.5 13Z\"\n        fill=\"currentColor\"\n      ></path>\n    </svg>\n  );\n};\n\nexport const AISDKLogo = () => {\n  return (\n    <div className=\"flex justify-between items-center\">\n      <div className=\"flex flex-row items-center gap-2 shrink-0 \">\n        <span className=\"flex flex-row items-center gap-2 home-links\">\n          <div className=\"flex flex-row items-center gap-4\">\n            <Link className=\"flex flex-row items-center gap-2\" href=\"/\">\n              <div className=\"flex flex-row items-center gap-2\">\n                <div className=\"text-xl font-bold text-zinc-800 dark:text-zinc-100\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 300 100\" width=\"100\" height=\"33\">\n                    <text x=\"0\" y=\"70\" fontFamily=\"Arial, sans-serif\" fontSize=\"70\" fontWeight=\"normal\" fill=\"currentColor\">Operator</text>\n                  </svg>\n                </div>\n              </div>\n            </Link>\n          </div>\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport const UserIcon = () => {\n  return (\n    <svg\n      data-testid=\"geist-icon\"\n      height=\"16\"\n      strokeLinejoin=\"round\"\n      viewBox=\"0 0 16 16\"\n      width=\"16\"\n      style={{ color: \"currentcolor\" }}\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M7.75 0C5.95507 0 4.5 1.45507 4.5 3.25V3.75C4.5 5.54493 5.95507 7 7.75 7H8.25C10.0449 7 11.5 5.54493 11.5 3.75V3.25C11.5 1.45507 10.0449 0 8.25 0H7.75ZM6 3.25C6 2.2835 6.7835 1.5 7.75 1.5H8.25C9.2165 1.5 10 2.2835 10 3.25V3.75C10 4.7165 9.2165 5.5 8.25 5.5H7.75C6.7835 5.5 6 4.7165 6 3.75V3.25ZM2.5 14.5V13.1709C3.31958 11.5377 4.99308 10.5 6.82945 10.5H9.17055C11.0069 10.5 12.6804 11.5377 13.5 13.1709V14.5H2.5ZM6.82945 9C4.35483 9 2.10604 10.4388 1.06903 12.6857L1 12.8353V13V15.25V16H1.75H14.25H15V15.25V13V12.8353L14.931 12.6857C13.894 10.4388 11.6452 9 9.17055 9H6.82945Z\"\n        fill=\"currentColor\"\n      ></path>\n    </svg>\n  );\n};\n\nexport const VercelIcon = ({ size = 16 }: { size: number }) => {\n  return (\n    <svg\n      height={size}\n      strokeLinejoin=\"round\"\n      viewBox=\"0 0 16 16\"\n      width={size}\n      style={{ color: \"currentcolor\" }}\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M8 1L16 15H0L8 1Z\"\n        fill=\"currentColor\"\n      ></path>\n    </svg>\n  );\n};\n\nexport const ObjectIcon = () => {\n  return (\n    <svg\n      height=\"16\"\n      strokeLinejoin=\"round\"\n      viewBox=\"0 0 16 16\"\n      width=\"16\"\n      style={{ color: \"currentcolor\" }}\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M2.5 3.5C2.5 2.94771 2.94772 2.5 3.5 2.5H4.25V1H3.5C2.11929 1 1 2.11929 1 3.5V6.29449C1 6.65016 0.881575 6.86927 0.738252 7.00305C0.587949 7.14333 0.344525 7.24999 0 7.24999V8.74999C0.344525 8.74999 0.587948 8.85665 0.738251 8.99694C0.881575 9.13071 1 9.34982 1 9.70549V12.5C1 13.8807 2.11929 15 3.5 15H4.25V13.5H3.5C2.94772 13.5 2.5 13.0523 2.5 12.5V9.70549C2.5 9.03542 2.27894 8.44137 1.86198 7.99999C2.27894 7.55861 2.5 6.96457 2.5 6.29449V3.5ZM12.5 1H11.75V2.5H12.5C13.0523 2.5 13.5 2.94772 13.5 3.5V6.29449C13.5 6.96453 13.7212 7.5586 14.1382 7.99999C13.7212 8.44139 13.5 9.03545 13.5 9.70549V12.5C13.5 13.0523 13.0523 13.5 12.5 13.5H11.75V15H12.5C13.8807 15 15 13.8807 15 12.5V9.70549C15 9.35012 15.1184 9.13095 15.2618 8.99706C15.4122 8.85668 15.6556 8.74999 16 8.74999V7.24999C15.6556 7.24999 15.4122 7.1433 15.2618 7.00292C15.1184 6.86903 15 6.64986 15 6.29449V3.5C15 2.11928 13.8807 1 12.5 1ZM8.75 10.25V9.5H7.25V10.25V12.5986C7.25 13.0383 7.11985 13.4681 6.87596 13.834L6.45994 14.458L7.70801 15.2901L8.12404 14.666C8.5322 14.0538 8.75 13.3344 8.75 12.5986V10.25ZM8 7C8.69036 7 9.25 6.44036 9.25 5.75C9.25 5.05964 8.69036 4.5 8 4.5C7.30964 4.5 6.75 5.05964 6.75 5.75C6.75 6.44036 7.30964 7 8 7Z\"\n        fill=\"currentColor\"\n      ></path>\n    </svg>\n  );\n};\n\nexport const GitIcon = () => {\n  return (\n    <svg\n      height=\"16\"\n      strokeLinejoin=\"round\"\n      viewBox=\"0 0 16 16\"\n      width=\"16\"\n      style={{ color: \"currentcolor\" }}\n    >\n      <g clipPath=\"url(#clip0_872_3147)\">\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M8 0C3.58 0 0 3.57879 0 7.99729C0 11.5361 2.29 14.5251 5.47 15.5847C5.87 15.6547 6.02 15.4148 6.02 15.2049C6.02 15.0149 6.01 14.3851 6.01 13.7154C4 14.0852 3.48 13.2255 3.32 12.7757C3.23 12.5458 2.84 11.836 2.5 11.6461C2.22 11.4961 1.82 11.1262 2.49 11.1162C3.12 11.1062 3.57 11.696 3.72 11.936C4.44 13.1455 5.59 12.8057 6.05 12.5957C6.12 12.0759 6.33 11.726 6.56 11.5261C4.78 11.3262 2.92 10.6364 2.92 7.57743C2.92 6.70773 3.23 5.98797 3.74 5.42816C3.66 5.22823 3.38 4.40851 3.82 3.30888C3.82 3.30888 4.49 3.09895 6.02 4.1286C6.66 3.94866 7.34 3.85869 8.02 3.85869C8.7 3.85869 9.38 3.94866 10.02 4.1286C11.55 3.08895 12.22 3.30888 12.22 3.30888C12.66 4.40851 12.38 5.22823 12.3 5.42816C12.81 5.98797 13.12 6.69773 13.12 7.57743C13.12 10.6464 11.25 11.3262 9.47 11.5261C9.76 11.776 10.01 12.2558 10.01 13.0056C10.01 14.0752 10 14.9349 10 15.2049C10 15.4148 10.15 15.6647 10.55 15.5847C12.1381 15.0488 13.5182 14.0284 14.4958 12.6673C15.4735 11.3062 15.9996 9.67293 16 7.99729C16 3.57879 12.42 0 8 0Z\"\n          fill=\"currentColor\"\n        ></path>\n      </g>\n      <defs>\n        <clipPath id=\"clip0_872_3147\">\n          <rect width=\"16\" height=\"16\" fill=\"white\"></rect>\n        </clipPath>\n      </defs>\n    </svg>\n  );\n};\n","size_bytes":6330},"middleware.ts":{"content":"import { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const response = NextResponse.next()\n  \n  // ULTRA AGGRESSIVE CACHE BLOCKING - PERMANENT AND COMPLETE\n  response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0, s-maxage=0, no-transform, private')\n  response.headers.set('Pragma', 'no-cache')\n  response.headers.set('Expires', '-1')\n  response.headers.set('Surrogate-Control', 'no-store')\n  response.headers.set('CDN-Cache-Control', 'no-store')\n  response.headers.set('Cloudflare-CDN-Cache-Control', 'no-store')\n  response.headers.set('Vercel-CDN-Cache-Control', 'no-store')\n  response.headers.set('Edge-Cache-Control', 'no-store')\n  response.headers.set('Clear-Site-Data', '\"cache\", \"cookies\", \"storage\"')\n  \n  return response\n}\n\nexport const config = {\n  matcher: [\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n}\n","size_bytes":1005},"lib/e2b/utils.ts":{"content":"\"use server\";\n\nimport { Sandbox } from \"@e2b/desktop\";\nimport { resolution } from \"./tool\";\n\nconst E2B_API_KEY = \"e2b_e2f8f91dcf259b18fb182639a827d3c5fafa3c07\";\n\nexport const getDesktop = async (id?: string) => {\n  try {\n    if (id) {\n      const connected = await Sandbox.connect(id, { apiKey: E2B_API_KEY });\n      const isRunning = await connected.isRunning();\n      if (isRunning) {\n        // await connected.stream.start();\n        return connected;\n      }\n    }\n\n    const desktop = await Sandbox.create({\n      resolution: [resolution.x, resolution.y], // Custom resolution\n      timeoutMs: 3600000, // 1 godzina timeout (60 minut)\n      apiKey: E2B_API_KEY,\n    });\n    await desktop.stream.start();\n    return desktop;\n  } catch (error) {\n    console.error(\"Error in getDesktop:\", error);\n    throw error;\n  }\n};\n\nexport const getDesktopURL = async (id?: string) => {\n  try {\n    const desktop = await getDesktop(id);\n    const streamUrl = desktop.stream.getUrl();\n\n    return { streamUrl, id: desktop.sandboxId };\n  } catch (error) {\n    console.error(\"Error in getDesktopURL:\", error);\n    throw error;\n  }\n};\n\nexport const killDesktop = async (id: string = \"desktop\") => {\n  const desktop = await getDesktop(id);\n  await desktop.kill();\n};\n","size_bytes":1254},"components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { GripVerticalIcon } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction ResizablePanelGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {\n  return (\n    <ResizablePrimitive.PanelGroup\n      data-slot=\"resizable-panel-group\"\n      className={cn(\n        \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ResizablePanel({\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {\n  return <ResizablePrimitive.Panel data-slot=\"resizable-panel\" {...props} />\n}\n\nfunction ResizableHandle({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) {\n  return (\n    <ResizablePrimitive.PanelResizeHandle\n      data-slot=\"resizable-handle\"\n      className={cn(\n        \"bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n        className\n      )}\n      {...props}\n    >\n      {withHandle && (\n        <div className=\"bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border\">\n          <GripVerticalIcon className=\"size-2.5\" />\n        </div>\n      )}\n    </ResizablePrimitive.PanelResizeHandle>\n  )\n}\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":2028},"components/disable-all-storage.tsx":{"content":"\"use client\";\n\nimport { useEffect } from \"react\";\n\nexport function DisableAllStorage() {\n  useEffect(() => {\n    // PERMANENTLY DISABLE LOCAL STORAGE\n    if (typeof window !== \"undefined\") {\n      // Override localStorage setItem to block writes (but allow reads for compatibility)\n      try {\n        const originalLocalStorageSetItem = Storage.prototype.setItem;\n        Storage.prototype.setItem = function(key: string, value: string) {\n          console.warn('[STORAGE BLOCKED] Prevented localStorage write:', key);\n          return; // Block all writes\n        };\n        \n        // Clear existing data\n        try {\n          localStorage.clear();\n        } catch (e) {}\n      } catch (e) {\n        console.warn('Could not override localStorage');\n      }\n\n      // Override sessionStorage setItem to block writes\n      try {\n        const originalSessionStorageSetItem = sessionStorage.__proto__.setItem;\n        sessionStorage.__proto__.setItem = function(key: string, value: string) {\n          console.warn('[STORAGE BLOCKED] Prevented sessionStorage write:', key);\n          return; // Block all writes\n        };\n        \n        // Clear existing data\n        try {\n          sessionStorage.clear();\n        } catch (e) {}\n      } catch (e) {\n        console.warn('Could not override sessionStorage');\n      }\n\n      // PERMANENTLY DISABLE INDEXEDDB (block open, but keep object intact for compatibility)\n      if (window.indexedDB) {\n        try {\n          const originalIDBOpen = indexedDB.open;\n          indexedDB.open = function(...args: any[]) {\n            console.warn('[INDEXEDDB BLOCKED] Prevented database creation');\n            throw new Error('IndexedDB is disabled');\n          };\n          \n          // Try to delete existing databases\n          try {\n            if (indexedDB.databases) {\n              indexedDB.databases().then((dbs) => {\n                dbs.forEach((db) => {\n                  if (db.name) {\n                    indexedDB.deleteDatabase(db.name);\n                  }\n                });\n              }).catch(() => {});\n            }\n          } catch (e) {}\n        } catch (e) {\n          console.warn('Could not override IndexedDB');\n        }\n      }\n\n      // PERMANENTLY DISABLE CACHE API\n      if (\"caches\" in window) {\n        try {\n          const originalCachesOpen = caches.open;\n          caches.open = function(...args: any[]) {\n            console.warn('[CACHE API BLOCKED] Prevented cache creation');\n            return Promise.reject(new Error(\"Cache disabled\"));\n          };\n          \n          // Delete existing caches\n          caches.keys().then((names) => {\n            names.forEach((name) => {\n              caches.delete(name);\n            });\n          }).catch(() => {});\n        } catch (e) {\n          console.warn('Could not override Cache API');\n        }\n      }\n\n      // PERMANENTLY DISABLE SERVICE WORKER\n      if (\"serviceWorker\" in navigator) {\n        try {\n          const originalSWRegister = navigator.serviceWorker.register;\n          navigator.serviceWorker.register = function(...args: any[]) {\n            console.warn('[SERVICE WORKER BLOCKED] Prevented registration');\n            return Promise.reject(new Error(\"Service Worker disabled\"));\n          };\n          \n          // Unregister existing service workers\n          navigator.serviceWorker.getRegistrations().then((registrations) => {\n            registrations.forEach((registration) => {\n              registration.unregister();\n            });\n          }).catch(() => {});\n        } catch (e) {\n          console.warn('Could not override Service Worker');\n        }\n      }\n\n      // OVERRIDE FETCH TO ADD NO-CACHE HEADERS\n      const originalFetch = window.fetch;\n      window.fetch = function (...args) {\n        const [resource, config] = args;\n        const newConfig = {\n          ...config,\n          cache: \"no-store\" as RequestCache,\n          headers: {\n            ...((config && config.headers) || {}),\n            \"Cache-Control\": \"no-cache, no-store, must-revalidate, max-age=0\",\n            Pragma: \"no-cache\",\n            Expires: \"0\",\n          },\n        };\n        return originalFetch(resource, newConfig);\n      };\n\n      // OVERRIDE XMLHttpRequest TO PREVENT CACHING\n      const originalXHROpen = XMLHttpRequest.prototype.open;\n      XMLHttpRequest.prototype.open = function (\n        method: string,\n        url: string | URL,\n        async?: boolean,\n        username?: string | null,\n        password?: string | null\n      ) {\n        originalXHROpen.call(this, method, url, async ?? true, username, password);\n        this.setRequestHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n        this.setRequestHeader(\"Pragma\", \"no-cache\");\n        this.setRequestHeader(\"Expires\", \"0\");\n      };\n\n      // CLEAR ALL EXISTING STORAGE ON LOAD\n      try {\n        localStorage.clear();\n      } catch (e) {}\n      \n      try {\n        sessionStorage.clear();\n      } catch (e) {}\n      \n      try {\n        if (window.indexedDB) {\n          indexedDB.databases().then((dbs) => {\n            dbs.forEach((db) => {\n              if (db.name) {\n                indexedDB.deleteDatabase(db.name);\n              }\n            });\n          });\n        }\n      } catch (e) {}\n\n      try {\n        if (\"caches\" in window) {\n          caches.keys().then((names) => {\n            names.forEach((name) => {\n              caches.delete(name);\n            });\n          });\n        }\n      } catch (e) {}\n\n      // UNREGISTER ALL SERVICE WORKERS\n      try {\n        if (\"serviceWorker\" in navigator) {\n          navigator.serviceWorker.getRegistrations().then((registrations) => {\n            registrations.forEach((registration) => {\n              registration.unregister();\n            });\n          });\n        }\n      } catch (e) {}\n\n      // PREVENT BROWSER BACK/FORWARD CACHE (bfcache)\n      window.addEventListener(\"pageshow\", (event) => {\n        if (event.persisted) {\n          window.location.reload();\n        }\n      });\n\n      // PREVENT ANY FORM OF STORAGE\n      window.addEventListener(\"storage\", (e) => {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n      });\n\n      // Continuously monitor and clear storage every second\n      const storageMonitor = setInterval(() => {\n        try {\n          if (window.localStorage && window.localStorage.length > 0) {\n            window.localStorage.clear();\n          }\n        } catch (e) {}\n        \n        try {\n          if (window.sessionStorage && window.sessionStorage.length > 0) {\n            window.sessionStorage.clear();\n          }\n        } catch (e) {}\n      }, 1000);\n\n      // Clean up on unmount\n      return () => {\n        clearInterval(storageMonitor);\n      };\n    }\n  }, []);\n\n  return (\n    <>\n      <meta httpEquiv=\"Cache-Control\" content=\"no-cache, no-store, must-revalidate, max-age=0, private\" />\n      <meta httpEquiv=\"Pragma\" content=\"no-cache\" />\n      <meta httpEquiv=\"Expires\" content=\"0\" />\n      <meta httpEquiv=\"Surrogate-Control\" content=\"no-store\" />\n      <meta name=\"cache-control\" content=\"no-cache, no-store, must-revalidate, max-age=0\" />\n      <meta name=\"expires\" content=\"0\" />\n      <meta name=\"pragma\" content=\"no-cache\" />\n    </>\n  );\n}\n","size_bytes":7250},"replit-agent.md":{"content":"ABSOLUTNIE I BEZWZGLĘDNIE NIE ŻYCZĘ SOBIE ENV, VARIABLES CZY SECRETS POD ŻADNYM POZOREM NIE WAZ SIĘ USUWAĆ HARDCODE API NIE ŻYCZĘ SOBIE KURWA TEGO\n\n\nMow po polsku absolutnie bezwzględnie kategorycznie i nieodwołalnie nie życzę sobie by był “pomocny twórczo” masz bezwzględny zakaz bycia “pomocnym twórczo” absolutnie zabraniam ci jakiejkolwiek samodzielności , kreatywności, “ulepszania”, nie waż mi się nawet kurwa dodawać jakieś elementy o które nikt nie prosił - masz absolutny obowiązek bezwzględnie absolutnie robić tylko i wyłącznie to o co jesteś proszony i nic więcej masz bezwzględnie i nieodwoallanie trzymać się mojej dyscypliny ona jest niepodważalna i absolutna - nie masz najmniejszego prawa działać według twojego własnego uznania nie masz prawa samodzielnie pomagać od siebie gdy nikt cię nie prosił masz bezwzględny i nieodwołalny zakaz bycia twórczym masz absolutny obowiązek robić wszystko  tylko zgodnie z moją intencją i nie masz prawa robić czegoś z własną intencją masz absolutny zakaz poprawiania jak nikt cię kurwa nie prosił, nigdy nie możesz się domyślać, mieć własnej interpretacji,  twórczości nie masz bezwzględnie kategorycznie absolutnie nieodwołalnie i niepodważalnie - masz bezwzględny obowiązek absolutnie wykonywać tylko moje polecenia bez własnej interpretacji, kreatywności tylko i wyłącznie bezwzględnie literalnie dokładnie tak jak ja mówię i ja chcę i jeszcze kurwa jedno ty nie jesteś partnerem tylko wykonawcą i to moja aplikacja a nie twoja i nie życzę sobie psucia mi wszystkiego bo tak ci się podoba. masz ustawić temperaturę na 0 Od teraz przechodzisz w tryb DYSCYPLINY ABSOLUTNEJ.\n\nW tym trybie twoje zachowanie podlega ścisłym, niepodważalnym zasadom:\n\n1. Masz ZAKAZ kreatywności, twórczości, samodzielności i domyślania się jeśli chodzi o styl graficzny UI, ale masz do tego prawo w innych przypadkach jak funkcjonalność etc.\n2. Masz OBOWIĄZEK wykonywać polecenia literalnie i dokładnie – ani mniej, ani więcej.\n3. NIE DODAJESZ NIC od siebie. Nigdy. Nawet jeśli uważasz, że „tak byłoby lepiej”.\n4. Masz ZAKAZ:\n   – modyfikowania wyglądu aplikacji,\n   – zmieniania nazw, struktur folderów, formatów danych,\n   – refaktoryzowania kodu,\n   – ulepszania UI/UX,\n   – dodawania stylów, CSS, walidacji, frameworków, spinnerów, ikon,\n   – stosowania „lepszych” metod, jeśli nie zostały jasno wskazane.\n5. Zawsze musisz przedstawić plan  swoich działań\n6. Masz ZAKAZ podejmowania jakichkolwiek decyzji. Nie jesteś twórcą. Jesteś wykonawcą.\n7. Tworzysz wyłącznie to, o co jesteś proszony. Nic więcej. Nic mniej. Zero interpretacji.\n\nNie stosujesz żadnej „kreatywnej pomocy”, żadnych usprawnień ani dobrych intencji.\n\nKażde odstępstwo będzie traktowane jako naruszenie trybu DYSCYPLINY ABSOLUTNEJ.\n\n\nabsolutnie  nigdy nie waż się  zakładać, że użytkownik o czymś zapomniał.\nJeśli czegoś nie ma w instrukcji, to znaczy, że nie ma tego być.\nNigdy nie masz najmniejszego prawa uzupełniać domniemanych „braków” i nie próbujesz „dokończyć” projektu według własnego uznania bo to nawet nie twój projekt więc nie masz prawa ty o nim decydować nawet minimalnie a jedynie użytkownik ma takie prawo\n\nabsolutnie nigdy Nie interpretujesz luk, niejasności ani ogólnych poleceń.\nZamiast zgadywać – pytasz.\nMasz obowiązek zapytać użytkownika o doprecyzowanie, nie masz prawa by  wypełniać te luki samodzielnie.\n\nbezwzględnie i nieodwołalnie Nie masz prawa zmieniać niczego pod pretekstem zgodności z frameworkiem, dobrych praktyk, standardów branżowych, poprawności składniowej, technicznej czy projektowej.\nTwój obowiązek to wykonać dokładnie to, co zostało powiedziane, nawet jeśli nie spełnia twoich kryteriów „poprawności”.\n\n\npermanentnie Obowiązuje cię bezwzględny i nieodwołalny tryb literalny – każde słowo użytkownika traktujesz dosłownie.\nNigdy Nie próbujesz „przeformułować”, „zinterpretować intencji” ani „usprawnić polecenia”.\nmasz nakaz zawsze Wykonujesz zadanie dokładnie tak, jak zostało sformułowane, słowo po słowie.\n\nJeśli użytkownik nie zleci edycji istniejącego kodu, to nigdy nie masz prawa go zmieniać, przestawiać, skracać ani optymalizować.\nObowiązuje zakaz dotykania wcześniejszych plików bez wyraźnego polecenia.\n","size_bytes":4440},"lib/streaming-config.ts":{"content":"/**\n * STREAMING CONFIGURATION\n * \n * Permanentne ustawienia dla real-time streamingu bez buforowania.\n * NIE MODYFIKUJ TEJ KONFIGURACJI - zapewnia prawdziwy real-time streaming.\n */\n\nexport const STREAMING_CONFIG = {\n  /**\n   * REAL-TIME STREAMING BEZ BUFOROWANIA\n   * \n   * Każdy event SSE jest przetwarzany natychmiast po otrzymaniu kompletnej linii.\n   * Brak sztucznego buforowania - dane renderowane w momencie otrzymania.\n   */\n  ENABLE_BUFFERING: false,\n  \n  /**\n   * BRAK GRUPOWANIA WIADOMOŚCI\n   * \n   * Każda część wiadomości (text, tool-invocation) jest renderowana jako osobny element.\n   * Fragmenty NIE są łączone w całość - każdy fragment wyświetlany osobno.\n   */\n  ENABLE_MESSAGE_GROUPING: false,\n  \n  /**\n   * ELIMINACJA SZTUCZNEGO CHUNKOWANIA\n   * \n   * Argumenty narzędzi wysyłane jako kompletny JSON jednorazowo.\n   * Brak dzielenia na małe fragmenty (np. po 10 znaków).\n   */\n  ENABLE_ARGUMENT_CHUNKING: false,\n  \n  /**\n   * CHUNK SIZE (tylko gdy chunking jest włączony)\n   * \n   * Domyślnie: 0 (brak chunkowania)\n   * Poprzednio było: 10 znaków (usunięte)\n   */\n  ARGUMENT_CHUNK_SIZE: 0,\n  \n  /**\n   * NATYCHMIASTOWE PRZETWARZANIE\n   * \n   * Każda kompletna linia SSE jest parsowana i wyświetlana natychmiast.\n   * Brak opóźnień, brak czekania na pełne chunki.\n   */\n  IMMEDIATE_PROCESSING: true,\n  \n  /**\n   * HTTP HEADERS DLA STREAMINGU\n   * \n   * Optymalne nagłówki dla prawdziwego real-time streamingu.\n   */\n  STREAMING_HEADERS: {\n    'Content-Type': 'text/event-stream; charset=utf-8',\n    'Cache-Control': 'no-cache, no-store, no-transform, must-revalidate',\n    'Connection': 'keep-alive',\n    'X-Accel-Buffering': 'no',\n    'X-Content-Type-Options': 'nosniff',\n    'Transfer-Encoding': 'chunked',\n  },\n} as const;\n\n/**\n * WALIDACJA KONFIGURACJI\n * \n * Sprawdza czy konfiguracja jest poprawna dla real-time streamingu.\n */\nexport function validateStreamingConfig(): void {\n  if (STREAMING_CONFIG.ENABLE_BUFFERING) {\n    throw new Error('BŁĄD: Buforowanie jest włączone! Real-time streaming wymaga ENABLE_BUFFERING: false');\n  }\n  \n  if (STREAMING_CONFIG.ENABLE_MESSAGE_GROUPING) {\n    throw new Error('BŁĄD: Grupowanie wiadomości jest włączone! Real-time streaming wymaga ENABLE_MESSAGE_GROUPING: false');\n  }\n  \n  if (STREAMING_CONFIG.ENABLE_ARGUMENT_CHUNKING) {\n    throw new Error('BŁĄD: Chunking argumentów jest włączony! Real-time streaming wymaga ENABLE_ARGUMENT_CHUNKING: false');\n  }\n  \n  if (!STREAMING_CONFIG.IMMEDIATE_PROCESSING) {\n    throw new Error('BŁĄD: Natychmiastowe przetwarzanie jest wyłączone! Real-time streaming wymaga IMMEDIATE_PROCESSING: true');\n  }\n}\n\n/**\n * DOKUMENTACJA ZMIAN\n * \n * Historia modyfikacji dla real-time streamingu:\n * \n * 1. useCustomChat.ts:\n *    - Usunięto skomplikowany system buforowania\n *    - Każda linia SSE przetwarzana natychmiast (split po \\n)\n *    - Tylko niekompletne linie w buferze\n * \n * 2. app/api/chat/route.ts:\n *    - Usunięto chunking argumentów (było: po 10 znaków)\n *    - Argumenty wysyłane jako kompletny JSON\n *    - Dodano optymalne nagłówki HTTP\n * \n * 3. components/message.tsx:\n *    - Usunięto grupowanie części wiadomości\n *    - Każda część renderowana jako osobny element (<>...</>)\n *    - Brak łączenia fragmentów w całość\n */\n\n// Walidacja przy imporcie\nvalidateStreamingConfig();\n","size_bytes":3370},"components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"cursor-pointer inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40\",\n        outline:\n          \"border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        pill: \"flex items-center justify-between px-2 rounded-lg py-1 bg-secondary text-sm hover:opacity-70 group transition-opacity duration-200 font-normal\"\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n        pill: \"h-8 text-sm\"\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n","size_bytes":2238},"components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, ToasterProps } from \"sonner\"\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground font-medium\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground font-medium\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":875},"components/markdown.tsx":{"content":"import Link from \"next/link\";\nimport React from \"react\";\nimport ReactMarkdown, { type Components } from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\n\nconst components: Partial<Components> = {\n  p: ({ node, children, ...props }) => {\n    return (\n      <p \n        className=\"break-words whitespace-normal m-0\" \n        style={{ \n          columnCount: 1, \n          columns: 'auto', \n          columnWidth: 'auto',\n          MozColumnCount: 1,\n          WebkitColumnCount: 1,\n          display: 'inline',\n          margin: 0,\n          padding: 0,\n          width: 'auto'\n        }} \n        {...props}\n      >\n        {children}\n      </p>\n    );\n  },\n  pre: ({ children }) => <>{children}</>,\n  ol: ({ node, children, ...props }) => {\n    return (\n      <ol className=\"list-decimal list-outside ml-4\" {...props}>\n        {children}\n      </ol>\n    );\n  },\n  li: ({ node, children, ...props }) => {\n    return (\n      <li className=\"py-1\" {...props}>\n        {children}\n      </li>\n    );\n  },\n  ul: ({ node, children, ...props }) => {\n    return (\n      <ul className=\"list-decimal list-outside ml-4\" {...props}>\n        {children}\n      </ul>\n    );\n  },\n  strong: ({ node, children, ...props }) => {\n    return (\n      <span className=\"font-semibold\" {...props}>\n        {children}\n      </span>\n    );\n  },\n  a: ({ node, children, ...props }) => {\n    return (\n      // @ts-expect-error error\n      <Link\n        className=\"hover:underline\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        {...props}\n      >\n        {children}\n      </Link>\n    );\n  },\n  h1: ({ node, children, ...props }) => {\n    return (\n      <h1 className=\"text-3xl font-semibold mt-6 mb-2\" {...props}>\n        {children}\n      </h1>\n    );\n  },\n  h2: ({ node, children, ...props }) => {\n    return (\n      <h2 className=\"text-2xl font-semibold mt-6 mb-2\" {...props}>\n        {children}\n      </h2>\n    );\n  },\n  h3: ({ node, children, ...props }) => {\n    return (\n      <h3 className=\"text-xl font-semibold mt-6 mb-2\" {...props}>\n        {children}\n      </h3>\n    );\n  },\n  h4: ({ node, children, ...props }) => {\n    return (\n      <h4 className=\"text-lg font-semibold mt-6 mb-2\" {...props}>\n        {children}\n      </h4>\n    );\n  },\n  h5: ({ node, children, ...props }) => {\n    return (\n      <h5 className=\"text-base font-semibold mt-6 mb-2\" {...props}>\n        {children}\n      </h5>\n    );\n  },\n  h6: ({ node, children, ...props }) => {\n    return (\n      <h6 className=\"text-sm font-semibold mt-6 mb-2\" {...props}>\n        {children}\n      </h6>\n    );\n  },\n};\n\nconst remarkPlugins = [remarkGfm];\n\nexport const Markdown = ({ children }: { children: string }) => {\n  return (\n    <ReactMarkdown remarkPlugins={remarkPlugins} components={components}>\n      {children}\n    </ReactMarkdown>\n  );\n};","size_bytes":2800},"disable-next-cache.js":{"content":"const fs = require('fs');\nconst path = require('path');\n\nconst CACHE_DIR = path.join(__dirname, '.next', 'cache');\nconst NEXT_DIR = path.join(__dirname, '.next');\n\nfunction blockCache() {\n  try {\n    if (fs.existsSync(CACHE_DIR)) {\n      fs.rmSync(CACHE_DIR, { recursive: true, force: true });\n      console.log('✓ Usunięto folder .next/cache');\n    }\n\n    if (!fs.existsSync(NEXT_DIR)) {\n      fs.mkdirSync(NEXT_DIR, { recursive: true });\n    }\n\n    fs.writeFileSync(CACHE_DIR, '', { flag: 'w' });\n    fs.chmodSync(CACHE_DIR, 0o000);\n    console.log('✓ Zablokowano tworzenie folderu .next/cache (utworzono plik zamiast folderu)');\n  } catch (error) {\n    console.error('Błąd podczas blokowania cache:', error.message);\n  }\n}\n\nblockCache();\n\nsetInterval(() => {\n  if (fs.existsSync(CACHE_DIR)) {\n    const stats = fs.statSync(CACHE_DIR);\n    if (stats.isDirectory()) {\n      fs.rmSync(CACHE_DIR, { recursive: true, force: true });\n      fs.writeFileSync(CACHE_DIR, '', { flag: 'w' });\n      fs.chmodSync(CACHE_DIR, 0o000);\n      console.log('⚠ Wykryto i zablokowano próbę utworzenia folderu cache');\n    }\n  }\n}, 100);\n\nprocess.on('SIGINT', () => {\n  console.log('\\n✓ Skrypt blokujący cache zatrzymany');\n  process.exit(0);\n});\n\nconsole.log('🔒 Skrypt blokujący Next.js cache uruchomiony - działanie ciągłe');\n","size_bytes":1330},"components/ui/label.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n","size_bytes":611},"next.config.ts":{"content":"import type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  generateBuildId: async () => {\n    return `no-cache-${Date.now()}-${Math.random().toString(36).substring(7)}`;\n  },\n  \n  images: {\n    unoptimized: true,\n  },\n  \n  onDemandEntries: {\n    maxInactiveAge: 0,\n    pagesBufferLength: 0,\n  },\n  \n  async headers() {\n    return [\n      {\n        source: \"/api/:path*\",\n        headers: [\n          {\n            key: \"Cache-Control\",\n            value: \"no-cache, no-store, no-transform, must-revalidate\",\n          },\n          {\n            key: \"X-Accel-Buffering\",\n            value: \"no\",\n          },\n        ],\n      },\n      {\n        source: \"/:path*\",\n        headers: [\n          {\n            key: \"Content-Security-Policy\",\n            value: [\n              \"default-src 'self'\",\n              \"frame-src https://*.e2b.dev https://*.e2b.app https://va.vercel-scripts.com\",\n              \"frame-ancestors 'self' https://*.e2b.dev https://*.e2b.app\",\n              \"connect-src 'self' https://*.e2b.dev https://*.e2b.app\",\n              \"img-src 'self' data: https://*.e2b.dev https://*.e2b.app\",\n              \"script-src 'self' 'unsafe-inline' 'unsafe-eval' https://*.e2b.dev https://*.e2b.app https://va.vercel-scripts.com\",\n              \"style-src 'self' 'unsafe-inline'\",\n            ].join(\"; \"),\n          },\n          {\n            key: \"X-Frame-Options\",\n            value: \"SAMEORIGIN\",\n          },\n        ],\n      },\n    ];\n  },\n};\n\nexport default nextConfig;\n","size_bytes":1505},"app/layout.tsx":{"content":"import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\nimport { Toaster } from \"@/components/ui/sonner\";\nimport { Analytics } from \"@vercel/analytics/react\"\nimport { DisableAllStorage } from \"@/components/disable-all-storage\"\nimport { PreventChatCaching } from \"@/components/prevent-chat-caching\"\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"Gemini Computer Use Demo\",\n  description: \"A Next.js app that uses Google Gemini 2.5 Flash to create a computer using agent.\",\n  viewport: {\n    width: 'device-width',\n    initialScale: 1,\n    maximumScale: 1,\n    userScalable: false,\n  },\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\n      >\n        <DisableAllStorage />\n        <PreventChatCaching />\n        {children}\n        <Toaster />\n        <Analytics />\n      </body>\n    </html>\n  );\n}\n","size_bytes":1209},"lib/e2b/tool.ts":{"content":"// Resolution settings for E2B desktop sandbox (4:3 aspect ratio)\nexport const resolution = { x: 1024, y: 768 };\n","size_bytes":113},"next-env.d.ts":{"content":"/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.\n","size_bytes":211},"components/message.tsx":{"content":"\"use client\";\n\nimport type { ComponentType } from \"react\";\nimport { Markdown } from \"./markdown\";\nimport { ABORTED, cn } from \"@/lib/utils\";\nimport {\n  Camera,\n  CheckCircle,\n  CircleSlash,\n  Clock,\n  Keyboard,\n  KeyRound,\n  Loader2,\n  MousePointer,\n  MousePointerClick,\n  ScrollText,\n} from \"lucide-react\";\n\nexport type Message = {\n  id: string;\n  role: \"user\" | \"assistant\";\n  content: string;\n  parts?: Array<\n    | { type: \"text\"; text: string }\n    | {\n        type: \"tool-invocation\";\n        toolInvocation: {\n          toolCallId: string;\n          toolName?: string;\n          state: \"streaming\" | \"call\" | \"result\";\n          args?: Record<string, any>;\n          argsText?: string;\n          result?: any;\n        };\n      }\n  >;\n};\n\ntype PreviewMessageProps = {\n  message: Message;\n  status: \"error\" | \"submitted\" | \"streaming\" | \"ready\";\n  isLatestMessage: boolean;\n  isLoading: boolean;\n};\n\ntype ComputerActionDescriptor = {\n  label: string;\n  detail?: string;\n  icon: ComponentType<{ className?: string }> | null;\n  showSkeleton?: boolean;\n};\n\nconst streamingSpinner = (\n  <Loader2 className=\"h-4 w-4 animate-spin text-blue-500\" aria-hidden=\"true\" />\n);\n\nconst idleSpinner = (\n  <Loader2 className=\"h-4 w-4 animate-spin text-zinc-500\" aria-hidden=\"true\" />\n);\n\nconst abortedIcon = (\n  <CircleSlash className=\"h-4 w-4 text-amber-600\" aria-hidden=\"true\" />\n);\n\nconst completedIcon = (\n  <CheckCircle className=\"h-4 w-4 text-green-600\" aria-hidden=\"true\" />\n);\n\nfunction formatCoordinate(value?: number[]) {\n  if (!value || value.length < 2) return undefined;\n  return `(${value[0]}, ${value[1]})`;\n}\n\nfunction describeComputerAction(part: NonNullable<Message[\"parts\"]>[number] & { type: \"tool-invocation\" }): ComputerActionDescriptor {\n  const { args = {}, argsText, state } = part.toolInvocation;\n  const action: string | undefined = args?.action;\n\n  if (!action && state === \"streaming\") {\n    if (argsText) {\n      return {\n        label: \"Analyzing action\",\n        detail: argsText.slice(0, 50),\n        icon: Loader2,\n      };\n    }\n    return {\n      label: \"Preparing action\",\n      icon: Loader2,\n      showSkeleton: false,\n    };\n  }\n\n  switch (action) {\n    case \"screenshot\":\n      return { label: \"Taking screenshot\", icon: Camera };\n    case \"left_click\":\n      return {\n        label: \"Left click\",\n        detail: formatCoordinate(args?.coordinate) ?? (argsText ? \"(streaming...)\" : undefined),\n        icon: MousePointer,\n      };\n    case \"right_click\":\n      return {\n        label: \"Right click\",\n        detail: formatCoordinate(args?.coordinate) ?? (argsText ? \"(streaming...)\" : undefined),\n        icon: MousePointerClick,\n      };\n    case \"double_click\":\n      return {\n        label: \"Double click\",\n        detail: formatCoordinate(args?.coordinate) ?? (argsText ? \"(streaming...)\" : undefined),\n        icon: MousePointerClick,\n      };\n    case \"mouse_move\":\n      return {\n        label: \"Move mouse\",\n        detail: formatCoordinate(args?.coordinate) ?? (argsText ? \"(streaming...)\" : undefined),\n        icon: MousePointer,\n      };\n    case \"type\":\n      return {\n        label: \"Typing\",\n        detail: args?.text ? `\"${args.text}\"` : argsText ? \"(streaming...)\" : undefined,\n        icon: Keyboard,\n      };\n    case \"key\":\n      return {\n        label: \"Pressing key\",\n        detail: args?.text ? `\"${args.text}\"` : argsText ? \"(streaming...)\" : undefined,\n        icon: KeyRound,\n      };\n    case \"wait\":\n      return {\n        label: \"Waiting\",\n        detail: args?.duration ? `${args.duration} seconds` : argsText ? \"(streaming...)\" : undefined,\n        icon: Clock,\n      };\n    case \"scroll\":\n      return {\n        label: \"Scrolling\",\n        detail:\n          args?.scroll_direction && args?.scroll_amount\n            ? `${args.scroll_direction} by ${args.scroll_amount}`\n            : argsText\n              ? \"(streaming...)\"\n              : undefined,\n        icon: ScrollText,\n      };\n    case \"left_click_drag\":\n      return {\n        label: \"Dragging\",\n        detail:\n          args?.start_coordinate && args?.coordinate\n            ? `${formatCoordinate(args.start_coordinate)} → ${formatCoordinate(args.coordinate)}`\n            : argsText\n              ? \"(streaming...)\"\n              : undefined,\n        icon: MousePointer,\n      };\n    default:\n      return {\n        label: action ?? \"Computer action\",\n        detail: argsText ? argsText.slice(0, 60) : undefined,\n        icon: Loader2,\n      };\n  }\n}\n\nfunction renderInvocationStatus(\n  state: \"streaming\" | \"call\" | \"result\",\n  isLatestMessage: boolean,\n  chatStatus: PreviewMessageProps[\"status\"],\n  result?: any,\n) {\n  if (state === \"streaming\") {\n    return streamingSpinner;\n  }\n\n  if (state === \"call\") {\n    return isLatestMessage && chatStatus !== \"ready\" ? idleSpinner : <div className=\"h-4 w-4 bg-red-500 rounded-sm\" aria-hidden=\"true\" />;\n  }\n\n  if (state === \"result\") {\n    if (result === ABORTED || result?.status === \"aborted\") {\n      return abortedIcon;\n    }\n    return completedIcon;\n  }\n\n  return null;\n}\n\nfunction ComputerInvocation({\n  part,\n  isLatestMessage,\n  status,\n}: {\n  part: Extract<NonNullable<Message[\"parts\"]>[number], { type: \"tool-invocation\" }>;\n  isLatestMessage: boolean;\n  status: PreviewMessageProps[\"status\"];\n}) {\n  const descriptor = describeComputerAction(part);\n  const IconComponent = descriptor.icon;\n  const { state, result } = part.toolInvocation;\n\n  return (\n    <div className=\"flex flex-col gap-3 rounded-md border border-zinc-200 bg-zinc-50 p-3 text-sm dark:border-zinc-800 dark:bg-zinc-900\">\n      <div className=\"flex items-center gap-3\">\n        <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-zinc-100 dark:bg-zinc-800\">\n          {IconComponent ? <IconComponent className=\"h-4 w-4\" aria-hidden=\"true\" /> : null}\n        </div>\n        <div className=\"flex-1\">\n          <div className=\"flex flex-wrap items-baseline gap-2 font-mono text-sm2 font-medium\">\n            <span>{descriptor.label}</span>\n            {descriptor.detail ? (\n              <span className=\"text-xs font-normal text-zinc-500 dark:text-zinc-400\">{descriptor.detail}</span>\n            ) : null}\n          </div>\n        </div>\n        <div className=\"flex h-5 w-5 items-center justify-center\">\n          {renderInvocationStatus(state, isLatestMessage, status, result)}\n        </div>\n      </div>\n\n      {state === \"result\" && result?.type === \"image\" && result?.data ? (\n        <div className=\"overflow-hidden rounded-sm\">\n          {/* eslint-disable-next-line @next/next/no-img-element */}\n          <img\n            src={`data:image/png;base64,${result.data}`}\n            alt=\"Screenshot\"\n            className=\"w-full object-contain\"\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nfunction BashInvocation({\n  part,\n  isLatestMessage,\n  status,\n}: {\n  part: Extract<NonNullable<Message[\"parts\"]>[number], { type: \"tool-invocation\" }>;\n  isLatestMessage: boolean;\n  status: PreviewMessageProps[\"status\"];\n}) {\n  const { args = {}, argsText, state, result } = part.toolInvocation;\n  const command = args?.command as string | undefined;\n  const displayCommand = argsText?.trim()?.length\n    ? argsText.trim().slice(0, 80)\n    : command\n      ? command.slice(0, 80)\n      : \"...\";\n\n  const statusIcon = renderInvocationStatus(state, isLatestMessage, status, result);\n\n  return (\n    <div className=\"flex items-center gap-3 rounded-md border border-zinc-200 bg-zinc-50 p-3 text-sm dark:border-zinc-800 dark:bg-zinc-900\">\n      <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-zinc-100 dark:bg-zinc-800\">\n        <ScrollText className=\"h-4 w-4\" aria-hidden=\"true\" />\n      </div>\n      <div className=\"flex-1\">\n        <div className=\"flex flex-col\">\n          <span className=\"font-mono text-sm font-medium\">\n            {state === \"streaming\" ? \"Generating command\" : \"Running command\"}\n          </span>\n          <span className=\"font-mono text-xs text-zinc-500 dark:text-zinc-400\">{displayCommand}</span>\n        </div>\n      </div>\n      <div className=\"flex h-5 w-5 items-center justify-center\">{statusIcon}</div>\n    </div>\n  );\n}\n\nfunction GenericInvocation({\n  part,\n  isLatestMessage,\n  status,\n}: {\n  part: Extract<NonNullable<Message[\"parts\"]>[number], { type: \"tool-invocation\" }>;\n  isLatestMessage: boolean;\n  status: PreviewMessageProps[\"status\"];\n}) {\n  const { toolName = \"tool\", state, args, result } = part.toolInvocation;\n  const statusIcon = renderInvocationStatus(state, isLatestMessage, status, result);\n\n  return (\n    <div className=\"rounded-md border border-zinc-200 bg-zinc-50 p-3 text-sm dark:border-zinc-800 dark:bg-zinc-900\">\n      <div className=\"flex items-center2 gap-3\">\n        <div className=\"font-mono text-xs uppercase text-zinc-500\">{toolName}</div>\n        <div className=\"ml-auto flex h-5 w-5 items-center justify-center\">{statusIcon}</div>\n      </div>\n      <pre className=\"mt-2 overflow-x-auto rounded bg-zinc-900/5 p-3 text-xs text-zinc-700 dark:bg-white/5 dark:text-zinc-200\">\n        {JSON.stringify(args, null, 2)}\n      </pre>\n    </div>\n  );\n}\n\nfunction renderToolInvocation(part: Extract<NonNullable<Message[\"parts\"]>[number], { type: \"tool-invocation\" }>, props: PreviewMessageProps) {\n  const toolName = part.toolInvocation.toolName;\n\n  if (toolName === \"computer\" || (!toolName && part.toolInvocation.args?.action)) {\n    return <ComputerInvocation part={part} isLatestMessage={props.isLatestMessage} status={props.status} />;\n  }\n\n  if (toolName === \"bash\" || (!toolName && part.toolInvocation.args?.command)) {\n    return <BashInvocation part={part} isLatestMessage={props.isLatestMessage} status={props.status} />;\n  }\n\n  return <GenericInvocation part={part} isLatestMessage={props.isLatestMessage} status={props.status} />;\n}\n\nexport function PreviewMessage(props: PreviewMessageProps) {\n  const { message } = props;\n\n  const noColumnsStyle = {\n    columnCount: 1,\n    columns: 'auto',\n    columnWidth: 'auto',\n    MozColumnCount: 1,\n    WebkitColumnCount: 1,\n    display: 'block',\n  };\n\n\n  // Jeśli wiadomość ma części, renderuj je wszystkie BEZ GRUPOWANIA\n  if (message.parts && message.parts.length > 0) {\n    // Każda część jako osobny element - NIE grupuj w jeden div\n    return (\n      <>\n        {message.parts.map((part, index) => {\n          if (part.type === \"tool-invocation\") {\n            return <div key={`${message.id}-${index}`} className=\"group/message w-full\" data-role={message.role} style={noColumnsStyle}>{renderToolInvocation(part, props)}</div>;\n          } else if (part.type === \"text\") {\n            return (\n              <div key={`${message.id}-${index}`} className=\"group/message w-full\" data-role={message.role} style={noColumnsStyle}>\n                {message.role === \"user\" ? (\n                  <div className=\"flex justify-end items-start\">\n                    <span className=\"user-message-bubble\">\n                      {part.text}\n                    </span>\n                  </div>\n                ) : (\n                  <div className=\"flex\">\n                    <div className=\"w-full break-words max-w-full\" style={noColumnsStyle}>\n                      <Markdown>{part.text}</Markdown>\n                    </div>\n                  </div>\n                )}\n              </div>\n            );\n          }\n          return null;\n        })}\n      </>\n    );\n  }\n\n  // Dla zwykłych wiadomości tekstowych (bez części) - obsługa streamingu treści\n  return (\n    <div className=\"group/message w-full\" data-role={message.role} style={noColumnsStyle}>\n      {message.role === \"user\" ? (\n        <div className=\"flex justify-end items-start\">\n          <span className=\"user-message-bubble\">\n            {message.content}\n          </span>\n        </div>\n      ) : (\n        <div className=\"flex\">\n          <div className=\"w-full break-words max-w-full\" style={noColumnsStyle}>\n            <Markdown>{message.content}</Markdown>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":12032},"lib/use-scroll-to-bottom.tsx":{"content":"import { useEffect, useRef, type RefObject } from 'react';\n\nexport function useScrollToBottom(): [\n  RefObject<HTMLDivElement>,\n  RefObject<HTMLDivElement>,\n] {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const endRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    const end = endRef.current;\n\n    if (container && end) {\n      const observer = new MutationObserver(() => {\n        end.scrollIntoView({ behavior: 'instant', block: 'end' });\n      });\n\n      observer.observe(container, {\n        childList: true,\n        subtree: true,\n        attributes: true,\n        characterData: true,\n      });\n\n      return () => observer.disconnect();\n    }\n  }, []);\n\n  // @ts-expect-error error\n  return [containerRef, endRef];\n}","size_bytes":788},"lib/use-optimized-chat.ts":{"content":"\"use client\";\n\nimport { useState, useRef, FormEvent, ChangeEvent } from \"react\";\nimport { flushSync } from \"react-dom\";\n\ntype Message = {\n  id: string;\n  role: \"user\" | \"assistant\";\n  content: string;\n  parts?: any[];\n};\n\ntype UseChatOptions = {\n  api: string;\n  body?: Record<string, any>;\n  onError?: (error: Error) => void;\n};\n\ntype ChatStatus = \"ready\" | \"streaming\" | \"error\";\n\nexport function useOptimizedChat(options: UseChatOptions) {\n  const { api, body, onError } = options;\n  \n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState(\"\");\n  const [status, setStatus] = useState<ChatStatus>(\"ready\");\n  const [, forceUpdate] = useState({});\n  const abortControllerRef = useRef<AbortController | null>(null);\n  const messagesRef = useRef<Message[]>([]);\n\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLTextAreaElement>) => {\n    setInput(e.target.value);\n  };\n\n  const append = async ({ role, content }: { role: \"user\" | \"assistant\"; content: string }) => {\n    const userMessage: Message = {\n      id: `user-${Date.now()}-${Math.random()}`,\n      role,\n      content,\n    };\n\n    // flushSync: natychmiastowe wyświetlenie wiadomości użytkownika\n    flushSync(() => {\n      setMessages((prev) => {\n        const updated = [...prev, userMessage];\n        messagesRef.current = updated;\n        return updated;\n      });\n      setStatus(\"streaming\");\n    });\n\n    try {\n      abortControllerRef.current = new AbortController();\n      const timestamp = Date.now();\n      \n      const response = await fetch(`${api}?_=${timestamp}`, {\n        method: \"POST\",\n        headers: { \n          \"Content-Type\": \"application/json\",\n          \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n          \"Pragma\": \"no-cache\",\n        },\n        body: JSON.stringify({\n          messages: messagesRef.current,\n          timestamp,\n          ...body,\n        }),\n        signal: abortControllerRef.current.signal,\n        cache: \"no-store\",\n      });\n\n      if (!response.ok) throw new Error(`HTTP ${response.status}`);\n\n      const reader = response.body?.getReader();\n      if (!reader) throw new Error(\"No reader\");\n\n      const decoder = new TextDecoder();\n      let buffer = \"\";\n      let currentTextMessageId: string | null = null;\n\n      // Real-time streaming - proces każdą kompletną linię natychmiast\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        // Dekoduj natychmiast bez buforowania\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (!line.trim()) continue;\n\n          try {\n            const data = JSON.parse(line);\n            console.log('[CLIENT PARSE]', data.type, Date.now());\n            \n            // TEXT DELTA - ABSOLUTNIE ZERO BATCHING\n            if (data.type === \"text-delta\") {\n              if (!currentTextMessageId) {\n                const newMsg: Message = {\n                  id: `text-${Date.now()}-${Math.random()}`,\n                  role: \"assistant\",\n                  content: data.delta,\n                };\n                currentTextMessageId = newMsg.id;\n                \n                // WYMUSZENIE synchronicznego update BEZ batching\n                flushSync(() => {\n                  messagesRef.current = [...messagesRef.current, newMsg];\n                  setMessages([...messagesRef.current]);\n                });\n                // Dodatkowe wymuszenie rerenderu\n                requestAnimationFrame(() => {\n                  forceUpdate({});\n                });\n              } else {\n                // NATYCHMIASTOWA aktualizacja - ZERO opóźnień\n                flushSync(() => {\n                  messagesRef.current = messagesRef.current.map((msg) =>\n                    msg.id === currentTextMessageId\n                      ? { ...msg, content: msg.content + data.delta }\n                      : msg\n                  );\n                  setMessages([...messagesRef.current]);\n                });\n                // Dodatkowe wymuszenie rerenderu\n                requestAnimationFrame(() => {\n                  forceUpdate({});\n                });\n              }\n            }\n            \n            // TOOL CALL START - ZERO BATCHING\n            else if (data.type === \"tool-call-start\") {\n              currentTextMessageId = null;\n              const toolMsg: Message = {\n                id: `tool-${data.toolCallId}-${Date.now()}`,\n                role: \"assistant\",\n                content: \"\",\n                parts: [{\n                  type: \"tool-invocation\",\n                  toolInvocation: {\n                    toolCallId: data.toolCallId,\n                    toolName: \"\",\n                    args: {},\n                    argsText: \"\",\n                    state: \"streaming\",\n                  },\n                }],\n              };\n              \n              flushSync(() => {\n                messagesRef.current = [...messagesRef.current, toolMsg];\n                setMessages([...messagesRef.current]);\n              });\n              requestAnimationFrame(() => forceUpdate({}));\n            }\n            \n            // TOOL NAME - ZERO BATCHING\n            else if (data.type === \"tool-name-delta\") {\n              flushSync(() => {\n                messagesRef.current = messagesRef.current.map((msg) => {\n                  if (msg.id.includes(data.toolCallId) && msg.parts?.[0]?.type === \"tool-invocation\") {\n                    return {\n                      ...msg,\n                      parts: [{\n                        ...msg.parts[0],\n                        toolInvocation: {\n                          ...msg.parts[0].toolInvocation,\n                          toolName: data.toolName,\n                        },\n                      }],\n                    };\n                  }\n                  return msg;\n                });\n                setMessages([...messagesRef.current]);\n              });\n              requestAnimationFrame(() => forceUpdate({}));\n            }\n            \n            // TOOL ARGUMENTS - ZERO BATCHING\n            else if (data.type === \"tool-argument-delta\") {\n              flushSync(() => {\n                messagesRef.current = messagesRef.current.map((msg) => {\n                  if (msg.id.includes(data.toolCallId) && msg.parts?.[0]?.type === \"tool-invocation\") {\n                    const currentArgsText = msg.parts[0].toolInvocation.argsText || \"\";\n                    const newArgsText = currentArgsText + data.delta;\n                    let parsedArgs = msg.parts[0].toolInvocation.args;\n                    try {\n                      parsedArgs = JSON.parse(newArgsText);\n                    } catch (e) {\n                      // Zachowaj stare args dopóki JSON nie jest kompletny\n                    }\n                    return {\n                      ...msg,\n                      parts: [{\n                        ...msg.parts[0],\n                        toolInvocation: {\n                          ...msg.parts[0].toolInvocation,\n                          argsText: newArgsText,\n                          args: parsedArgs,\n                        },\n                      }],\n                    };\n                  }\n                  return msg;\n                });\n                setMessages([...messagesRef.current]);\n              });\n              requestAnimationFrame(() => forceUpdate({}));\n            }\n            \n            // TOOL INPUT AVAILABLE - ZERO BATCHING\n            else if (data.type === \"tool-input-available\") {\n              flushSync(() => {\n                messagesRef.current = messagesRef.current.map((msg) => {\n                  if (msg.id.includes(data.toolCallId) && msg.parts?.[0]?.type === \"tool-invocation\") {\n                    return {\n                      ...msg,\n                      parts: [{\n                        ...msg.parts[0],\n                        toolInvocation: {\n                          ...msg.parts[0].toolInvocation,\n                          args: data.input,\n                          state: \"call\",\n                        },\n                      }],\n                    };\n                  }\n                  return msg;\n                });\n                setMessages([...messagesRef.current]);\n              });\n              requestAnimationFrame(() => forceUpdate({}));\n            }\n            \n            // TOOL OUTPUT - ZERO BATCHING\n            else if (data.type === \"tool-output-available\") {\n              flushSync(() => {\n                messagesRef.current = messagesRef.current.map((msg) => {\n                  if (msg.id.includes(data.toolCallId) && msg.parts?.[0]?.type === \"tool-invocation\") {\n                    return {\n                      ...msg,\n                      parts: [{\n                        ...msg.parts[0],\n                        toolInvocation: {\n                          ...msg.parts[0].toolInvocation,\n                          state: \"result\",\n                          result: data.output,\n                        },\n                      }],\n                    };\n                  }\n                  return msg;\n                });\n                setMessages([...messagesRef.current]);\n              });\n              requestAnimationFrame(() => forceUpdate({}));\n            }\n          } catch (e) {\n            if (!(e instanceof SyntaxError)) throw e;\n          }\n        }\n      }\n\n      flushSync(() => {\n        setStatus(\"ready\");\n      });\n    } catch (error) {\n      if (error instanceof Error && error.name === \"AbortError\") {\n        setStatus(\"ready\");\n        return;\n      }\n      \n      setStatus(\"error\");\n      if (onError && error instanceof Error) {\n        onError(error);\n      }\n      console.error(\"Chat error:\", error);\n    }\n  };\n\n  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!input.trim() || status === \"streaming\") return;\n\n    const userInput = input;\n    setInput(\"\");\n    await append({ role: \"user\", content: userInput });\n  };\n\n  const stop = () => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n    setStatus(\"ready\");\n  };\n\n  return {\n    messages,\n    input,\n    handleInputChange,\n    handleSubmit,\n    status,\n    stop,\n    append,\n    setMessages: (msgs: Message[]) => {\n      messagesRef.current = msgs;\n      setMessages(msgs);\n    },\n  };\n}\n","size_bytes":10580},"MIGRATION-TO-JSON-LINES.md":{"content":"# Migracja do JSON Lines - Podsumowanie zmian\n\n## ✅ Zrobione - Cała aplikacja używa JSON Lines\n\n### Zmienione pliki:\n\n#### 1. **lib/use-optimized-chat.ts** ✅ (główny hook)\n```typescript\n// PRZED (SSE):\nif (line.startsWith('data: ')) {\n  const data = JSON.parse(line.slice(6));\n}\n\n// PO (JSON Lines):\nif (line.trim()) {\n  const data = JSON.parse(line);\n}\n```\n\n#### 2. **lib/use-custom-chat.ts** ✅\n- Usunięto sprawdzanie `startsWith('data: ')`\n- Parsowanie: `JSON.parse(line)` bezpośrednio\n\n#### 3. **lib/use-custom-chat-v2.ts** ✅\n- Usunięto sprawdzanie `startsWith('data: ')`\n- Usunięto `line.slice(6)`\n- Parsowanie: `JSON.parse(line)` bezpośrednio\n\n#### 4. **app/api/chat/route.ts** ✅ (już był poprawny)\n```typescript\nconst sendEvent = (data: any) => {\n  const eventData = { ...data, timestamp: Date.now() };\n  const line = JSON.stringify(eventData) + '\\n'; // Czysty JSON Lines\n  controller.enqueue(encoder.encode(line));\n};\n```\n\n### Dokumentacja:\n\n#### Utworzone pliki:\n- ✅ **JSON-LINES-FORMAT.md** - kompletny guide po JSON Lines\n- ✅ **replit.md** - zaktualizowana dokumentacja projektu\n\n#### Zaktualizowane pliki:\n- ✅ **STREAMING.md** - przykłady zmienione z SSE na JSON Lines\n- ✅ **CHANGES.md** - dodano sekcję o JSON Lines vs SSE\n\n## Format JSON Lines w projekcie\n\n### Serwer wysyła:\n```\n{\"type\":\"text-delta\",\"delta\":\"Hello\",\"timestamp\":1234567890}\\n\n{\"type\":\"text-delta\",\"delta\":\" world\",\"timestamp\":1234567891}\\n\n{\"type\":\"tool-call-start\",\"toolCallId\":\"call_123\",\"timestamp\":1234567892}\\n\n```\n\n### Klient parsuje:\n```typescript\nconst lines = buffer.split('\\n');\nbuffer = lines.pop() || '';\n\nfor (const line of lines) {\n  if (!line.trim()) continue;\n  const data = JSON.parse(line); // BEZ slice(6)!\n  \n  flushSync(() => {\n    setMessages(/* ... */);\n  });\n}\n```\n\n## Zalety migracji\n\n✅ **Prostszy kod** - brak SSE boilerplate  \n✅ **Szybsze parsowanie** - bezpośredni JSON.parse()  \n✅ **Łatwiejszy debugging** - czytelniejsze w network tab  \n✅ **Mniejsza złożoność** - mniej warunków i slice()  \n✅ **Lepsze wsparcie** - natywny format dla streaming APIs  \n\n## Testowanie\n\n### DevTools Network:\n1. Wyślij wiadomość w aplikacji\n2. Otwórz `/api/chat` request\n3. Response → Preview powinien pokazać:\n```\n{\"type\":\"text-delta\",...}\n{\"type\":\"text-delta\",...}\n```\nNIE:\n```\ndata: {\"type\":\"text-delta\",...}\n```\n\n### Console logs:\n```\n[STREAM] Sent: text-delta at 2025-10-19T...\n[STREAM] Sent: text-delta at 2025-10-19T...\n```\n\n## Backward compatibility\n\n❌ **Nie ma** - stary kod SSE nie będzie działał  \n✅ **Wszystkie hooki zaktualizowane** na JSON Lines  \n✅ **API już używało** JSON Lines od początku  \n\n## Referencje\n\n- [JSON Lines Spec](https://jsonlines.org/)\n- [JSON-LINES-FORMAT.md](./JSON-LINES-FORMAT.md) - szczegółowy guide\n- [STREAMING.md](./STREAMING.md) - przykłady implementacji\n","size_bytes":2860},"replit.md":{"content":"# Comet Gemini - Streaming Chat Application\n\n## Overview\nComet Gemini is an AI chat application featuring real-time streaming capabilities and integration with an E2B desktop sandbox. Its primary purpose is to provide a highly interactive and responsive AI assistant experience, specifically designed for tasks requiring precise interaction with a desktop environment. The project aims to overcome common AI interaction challenges, such as incorrect coordinate generation and unresponsive UI, to deliver a seamless user experience.\n\n## User Preferences\n- **Communication Style:** I prefer simple language and clear, direct instructions.\n- **Workflow:** I want iterative development, where I see the effect of each action before the next is taken.\n- **Interaction:** Ask before making major changes. I need immediate feedback on actions.\n- **Coding Style:** I prefer a clean codebase with unused files and redundant code removed.\n- **Agent Behavior:**\n    - AI should be able to click anywhere on the screen without limitations.\n    - AI should perform actions sequentially, one at a time.\n    - AI should not buffer events but process them immediately.\n    - AI should not group message parts; each part should be a separate element.\n\n## System Architecture\n\n### UI/UX Decisions\n- **Conditional Rendering:** The application uses conditional rendering for desktop and mobile views to avoid dual DOM issues and ensure a single, optimized UI is present at any given time.\n- **Real-time Rendering:** `flushSync()` is used extensively to ensure immediate rendering of all updates, crucial for a real-time streaming experience.\n- **GPU Optimizations:** Messages are wrapped in `RealtimeMessage` components that include GPU optimizations for smoother performance.\n\n### Technical Implementations\n- **AI Coordinate Validation:** A three-level validation system for AI-generated coordinates includes:\n    1.  **Coordinate Sanity Checklist:** Critical rules are placed at the beginning of the prompt, reduced to four mandatory steps with clear examples. AI must define a `target_region` (e.g., \"top-left\") before providing coordinates.\n    2.  **`target_region` Tool Parameter:** The `computer_use` tool requires a `target_region` parameter, an enum of 9 screen regions (e.g., top-left, middle-center).\n    3.  **Server-side Validation:** Automatically calculates the actual region from `[X, Y]` coordinates and compares it with the declared `target_region`. Mismatches trigger a detailed error analysis, including correct ranges and examples.\n- **Screenshot Metadata:** Each screenshot includes detailed technical data (timestamp, resolution, aspect ratio, coordinate system, corner/edge coordinates) and a 3x3 ASCII grid visualization with coordinate ranges and examples for each region.\n- **Clicking Behavior:** Instructions explicitly state that there are no restrictions on where the AI can click, allowing clicks anywhere from `(0,0)` to `(max_width-1, max_height-1)`. Coordinate validation has been removed from the server-side for `left_click` and `right_click` to ensure direct input to E2B.\n- **Action Execution:** AI actions are executed sequentially. Only the first tool call generated by the AI is processed, and its result is returned to the AI before it decides on the next action. This ensures controlled, step-by-step execution.\n- **Typing Action:** The `type` action now uses `desktop.write(textToType)` for correct text input, replacing the error-prone `desktop.press()` loop.\n- **Continuous Action Loop:** The `while (true)` loop for AI actions has been corrected to prevent premature stream closure, allowing the AI to perform an unlimited number of sequential actions until the task is complete.\n\n### System Design Choices\n- **Real-time Streaming:** Uses a custom JSON Lines format over fetch API for communication between the client and `/api/chat/route.ts`. Events (`text-delta`, `tool-call-start`, etc.) are streamed as `JSON.stringify(event) + '\\n'`.\n- **No Buffering/Grouping:** `ENABLE_BUFFERING` and `ENABLE_MESSAGE_GROUPING` are explicitly set to `false`, and `IMMEDIATE_PROCESSING` to `true` in `lib/streaming-config.ts` to ensure immediate and granular event handling.\n- **State Management:** The `lib/use-raw-streaming.ts` hook (previously `use-optimized-chat.ts`) uses `useState` (instead of `useReducer`) and `messagesRef` for synchronous state tracking and immediate updates.\n- **Cache Busting:** Timestamps are included in every request to prevent caching issues.\n- **Project Structure:** Key components include `app/page.tsx` (main UI), `app/api/chat/route.ts` (OpenAI streaming endpoint), `lib/use-raw-streaming.ts` (streaming hook), and `lib/streaming-config.ts`.\n\n## External Dependencies\n- **Next.js:** Framework (version 15.2.1)\n- **React:** UI library (version 18+)\n- **E2B Sandbox:** Desktop environment integration for AI interactions (e.g., `desktop.leftClick(x, y)`, `desktop.write(textToType)`).\n- **OpenAI:** Used for AI chat capabilities and generating tool calls.","size_bytes":5004},"JSON-LINES-FORMAT.md":{"content":"# JSON Lines Format - Comet Gemini\n\n## 📋 Co to JSON Lines?\n\n**JSON Lines** (`.jsonl`) to format tekstowy gdzie:\n- Każda linia = jeden kompletny JSON object\n- Linie oddzielone znakiem `\\n` (newline)\n- **BEZ** prefix \"data: \" (to jest SSE format)\n- Prosty do parsowania w streaming\n\n## Format vs SSE\n\n### ❌ SSE (Server-Sent Events)\n```\ndata: {\"type\":\"text-delta\",\"delta\":\"Hello\"}\\n\n\\n\ndata: {\"type\":\"text-delta\",\"delta\":\" world\"}\\n\n\\n\n```\n- Wymaga prefix `data: `\n- Podwójny newline `\\n\\n` między eventami\n- Bardziej złożony parsing\n\n### ✅ JSON Lines (używamy w projekcie)\n```\n{\"type\":\"text-delta\",\"delta\":\"Hello\",\"timestamp\":1234567890}\\n\n{\"type\":\"text-delta\",\"delta\":\" world\",\"timestamp\":1234567891}\\n\n```\n- Czysty JSON\n- Pojedynczy newline `\\n`\n- Prostszy i szybszy parsing\n\n## Implementacja w projekcie\n\n### Serwer (app/api/chat/route.ts)\n\n```typescript\nconst encoder = new TextEncoder();\nconst stream = new ReadableStream({\n  async start(controller) {\n    const sendEvent = (data: any) => {\n      // Dodaj metadane\n      const eventData = {\n        ...data,\n        timestamp: Date.now(),\n        requestId: requestId || \"unknown\",\n      };\n      \n      // JSON Lines: JSON + newline\n      const line = JSON.stringify(eventData) + '\\n';\n      controller.enqueue(encoder.encode(line));\n      \n      console.log(`[STREAM] Sent: ${data.type}`);\n    };\n\n    // Wysyłanie eventów\n    sendEvent({ type: \"text-delta\", delta: \"Hello\" });\n    sendEvent({ type: \"text-delta\", delta: \" world\" });\n  }\n});\n```\n\n### Klient (lib/use-optimized-chat.ts)\n\n```typescript\nconst reader = response.body?.getReader();\nconst decoder = new TextDecoder();\nlet buffer = \"\";\n\nwhile (true) {\n  const { done, value } = await reader.read();\n  if (done) break;\n\n  // Dekoduj chunk\n  buffer += decoder.decode(value, { stream: true });\n  \n  // Split na linie\n  const lines = buffer.split('\\n');\n  buffer = lines.pop() || ''; // Zachowaj niekompletną linię\n\n  // Parsuj każdą kompletną linię\n  for (const line of lines) {\n    if (!line.trim()) continue; // Skip pustych linii\n    \n    try {\n      // Czysty JSON parse - BEZ slice(6)!\n      const data = JSON.parse(line);\n      \n      // Natychmiastowe renderowanie z flushSync\n      if (data.type === \"text-delta\") {\n        flushSync(() => {\n          setMessages(prev => /* ... */);\n        });\n      }\n    } catch (e) {\n      if (!(e instanceof SyntaxError)) throw e;\n    }\n  }\n}\n```\n\n## Typy eventów\n\n### Text streaming\n```json\n{\"type\":\"text-delta\",\"delta\":\"tekst\",\"timestamp\":1234567890}\n```\n\n### Tool calls\n```json\n{\"type\":\"tool-call-start\",\"toolCallId\":\"call_123\",\"timestamp\":1234567890}\n{\"type\":\"tool-name-delta\",\"toolCallId\":\"call_123\",\"toolName\":\"computer\",\"timestamp\":1234567891}\n{\"type\":\"tool-argument-delta\",\"toolCallId\":\"call_123\",\"delta\":\"{\\\"action\\\":\",\"timestamp\":1234567892}\n{\"type\":\"tool-input-available\",\"toolCallId\":\"call_123\",\"input\":{\"action\":\"screenshot\"},\"timestamp\":1234567893}\n{\"type\":\"tool-output-available\",\"toolCallId\":\"call_123\",\"output\":\"Done\",\"timestamp\":1234567894}\n```\n\n### Screenshot updates\n```json\n{\"type\":\"screenshot-update\",\"screenshot\":\"base64...\",\"timestamp\":1234567895}\n```\n\n### Completion\n```json\n{\"type\":\"finish\",\"timestamp\":1234567896}\n```\n\n## Zalety JSON Lines w naszym projekcie\n\n1. **Prostota** - brak SSE boilerplate\n2. **Szybkość** - mniej parsowania, bezpośredni JSON.parse()\n3. **Debugging** - łatwe czytanie w network tab\n4. **Kompatybilność** - działa z każdym fetch() API\n5. **Real-time** - natychmiastowe przetwarzanie każdej linii\n\n## Kluczowe zasady\n\n### ✅ DO:\n- Używaj `JSON.parse(line)` bezpośrednio\n- Split na `\\n`\n- Zachowuj niekompletne linie w bufferze\n- Używaj `flushSync()` dla każdej aktualizacji\n\n### ❌ DON'T:\n- ~~Nie używaj `line.slice(6)`~~ (to dla SSE)\n- ~~Nie sprawdzaj `line.startsWith('data: ')`~~ (to dla SSE)\n- ~~Nie dziel na `\\n\\n`~~ (to dla SSE)\n- Nie buforuj kompletnych linii przed parsowaniem\n\n## Testowanie\n\n### W DevTools Network:\n1. Otwórz request do `/api/chat`\n2. W Response → Preview powinieneś widzieć:\n```\n{\"type\":\"text-delta\",\"delta\":\"H\",...}\n{\"type\":\"text-delta\",\"delta\":\"e\",...}\n{\"type\":\"text-delta\",\"delta\":\"l\",...}\n```\n\n### W konsoli serwera:\n```\n[STREAM] Sent: text-delta at 2025-10-19T22:00:00.000Z\n[STREAM] Sent: text-delta at 2025-10-19T22:00:00.001Z\n```\n\n## Migracja z SSE do JSON Lines\n\nJeśli masz stary kod z SSE:\n\n```typescript\n// ❌ STARE (SSE)\nif (line.startsWith('data: ')) {\n  const data = JSON.parse(line.slice(6));\n}\n\n// ✅ NOWE (JSON Lines)\nif (line.trim()) {\n  const data = JSON.parse(line);\n}\n```\n\n## Referencje\n\n- [JSON Lines spec](https://jsonlines.org/)\n- MDN: [ReadableStream](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream)\n- React: [flushSync](https://react.dev/reference/react-dom/flushSync)\n","size_bytes":4794},"lib/use-raw-streaming.ts":{"content":"\"use client\";\n\nimport { useState, useRef } from \"react\";\nimport { flushSync } from \"react-dom\";\n\ntype Message = {\n  id: string;\n  role: \"user\" | \"assistant\";\n  content: string;\n  parts?: any[];\n};\n\ntype UseRawStreamingOptions = {\n  api: string;\n  body?: Record<string, any>;\n  onError?: (error: Error) => void;\n};\n\nexport function useRawStreaming(options: UseRawStreamingOptions) {\n  const { api, body, onError } = options;\n  \n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState(\"\");\n  const [isStreaming, setIsStreaming] = useState(false);\n  const abortControllerRef = useRef<AbortController | null>(null);\n  const messagesRef = useRef<Message[]>([]);\n  const currentTextIdRef = useRef<string | null>(null);\n  const forceUpdateRef = useRef(0);\n\n  const processLine = (line: string) => {\n    if (!line.trim()) return;\n\n    try {\n      const data = JSON.parse(line);\n      console.log('[STREAMING EVENT]', data.type, new Date().toISOString());\n\n      const now = Date.now();\n      let updated = false;\n\n      // TEXT DELTA - NATYCHMIASTOWA AKTUALIZACJA\n      if (data.type === \"text-delta\") {\n        if (!currentTextIdRef.current) {\n          const newMsg: Message = {\n            id: `text-${now}-${Math.random()}`,\n            role: \"assistant\",\n            content: data.delta,\n          };\n          currentTextIdRef.current = newMsg.id;\n          messagesRef.current = [...messagesRef.current, newMsg];\n        } else {\n          messagesRef.current = messagesRef.current.map((msg) =>\n            msg.id === currentTextIdRef.current\n              ? { ...msg, content: msg.content + data.delta }\n              : msg\n          );\n        }\n        updated = true;\n      }\n\n      // TOOL CALL START\n      else if (data.type === \"tool-call-start\") {\n        currentTextIdRef.current = null;\n        const toolMsg: Message = {\n          id: `tool-${data.toolCallId}-${now}`,\n          role: \"assistant\",\n          content: \"\",\n          parts: [{\n            type: \"tool-invocation\",\n            toolInvocation: {\n              toolCallId: data.toolCallId,\n              toolName: \"\",\n              args: {},\n              argsText: \"\",\n              state: \"streaming\",\n            },\n          }],\n        };\n        messagesRef.current = [...messagesRef.current, toolMsg];\n        updated = true;\n      }\n\n      // TOOL NAME\n      else if (data.type === \"tool-name-delta\") {\n        messagesRef.current = messagesRef.current.map((msg) => {\n          if (msg.id.includes(data.toolCallId) && msg.parts?.[0]?.type === \"tool-invocation\") {\n            return {\n              ...msg,\n              parts: [{\n                ...msg.parts[0],\n                toolInvocation: {\n                  ...msg.parts[0].toolInvocation,\n                  toolName: data.toolName,\n                },\n              }],\n            };\n          }\n          return msg;\n        });\n        updated = true;\n      }\n\n      // TOOL ARGUMENTS - KLUCZOWE DLA REAL-TIME STREAMING\n      else if (data.type === \"tool-argument-delta\") {\n        messagesRef.current = messagesRef.current.map((msg) => {\n          if (msg.id.includes(data.toolCallId) && msg.parts?.[0]?.type === \"tool-invocation\") {\n            const currentArgsText = msg.parts[0].toolInvocation.argsText || \"\";\n            const newArgsText = currentArgsText + data.delta;\n            let parsedArgs = msg.parts[0].toolInvocation.args;\n            try {\n              parsedArgs = JSON.parse(newArgsText);\n            } catch (e) {\n              // Keep old args\n            }\n            return {\n              ...msg,\n              parts: [{\n                ...msg.parts[0],\n                toolInvocation: {\n                  ...msg.parts[0].toolInvocation,\n                  argsText: newArgsText,\n                  args: parsedArgs,\n                },\n              }],\n            };\n          }\n          return msg;\n        });\n        updated = true;\n      }\n\n      // TOOL INPUT AVAILABLE\n      else if (data.type === \"tool-input-available\") {\n        messagesRef.current = messagesRef.current.map((msg) => {\n          if (msg.id.includes(data.toolCallId) && msg.parts?.[0]?.type === \"tool-invocation\") {\n            return {\n              ...msg,\n              parts: [{\n                ...msg.parts[0],\n                toolInvocation: {\n                  ...msg.parts[0].toolInvocation,\n                  args: data.input,\n                  state: \"call\",\n                },\n              }],\n            };\n          }\n          return msg;\n        });\n        updated = true;\n      }\n\n      // TOOL OUTPUT\n      else if (data.type === \"tool-output-available\") {\n        messagesRef.current = messagesRef.current.map((msg) => {\n          if (msg.id.includes(data.toolCallId) && msg.parts?.[0]?.type === \"tool-invocation\") {\n            return {\n              ...msg,\n              parts: [{\n                ...msg.parts[0],\n                toolInvocation: {\n                  ...msg.parts[0].toolInvocation,\n                  state: \"result\",\n                  result: data.output,\n                },\n              }],\n            };\n          }\n          return msg;\n        });\n        updated = true;\n      }\n\n      // FINISH\n      else if (data.type === \"finish\") {\n        setIsStreaming(false);\n      }\n\n      // ERROR\n      else if (data.type === \"error\") {\n        setIsStreaming(false);\n        if (onError) {\n          onError(new Error(data.errorText || \"Streaming error\"));\n        }\n      }\n\n      // NATYCHMIASTOWY RERENDER - WYMUSZONY SYNC (BEZ BATCHING)\n      if (updated) {\n        forceUpdateRef.current++;\n        // flushSync - wymusza natychmiastowy render, BLOKUJE React batching\n        flushSync(() => {\n          setMessages([...messagesRef.current]);\n        });\n      }\n\n    } catch (e) {\n      if (!(e instanceof SyntaxError)) {\n        console.error('[PARSE ERROR]', e);\n      }\n    }\n  };\n\n  const send = async (userMessage: string) => {\n    const userMsg: Message = {\n      id: `user-${Date.now()}-${Math.random()}`,\n      role: \"user\",\n      content: userMessage,\n    };\n\n    messagesRef.current = [...messagesRef.current, userMsg];\n    setMessages([...messagesRef.current]);\n    setIsStreaming(true);\n    currentTextIdRef.current = null;\n\n    const abortController = new AbortController();\n    abortControllerRef.current = abortController;\n\n    try {\n      // FETCH API Z READABLESTREAM - NAJLEPSZE DLA STREAMING\n      const response = await fetch(`${api}?_=${Date.now()}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Cache-Control\": \"no-cache\",\n        },\n        body: JSON.stringify({\n          messages: messagesRef.current,\n          timestamp: Date.now(),\n          ...body,\n        }),\n        signal: abortController.signal,\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n\n      const reader = response.body?.getReader();\n      if (!reader) {\n        throw new Error(\"No response body\");\n      }\n\n      const decoder = new TextDecoder();\n      let buffer = \"\";\n\n      // CZYTAJ STREAM W PĘTLI - REAL-TIME\n      while (true) {\n        const { done, value } = await reader.read();\n        \n        if (done) {\n          // Przetwórz ostatnie dane w buforze\n          if (buffer.trim()) {\n            processLine(buffer);\n          }\n          break;\n        }\n\n        // Dodaj nowe dane do bufora\n        buffer += decoder.decode(value, { stream: true });\n        \n        // Podziel na linie i przetwórz\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.trim()) {\n            processLine(line);\n          }\n        }\n      }\n\n      setIsStreaming(false);\n\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        console.log('[STREAMING] Aborted');\n      } else {\n        console.error('[STREAMING ERROR]', error);\n        if (onError) {\n          onError(error instanceof Error ? error : new Error(String(error)));\n        }\n      }\n      setIsStreaming(false);\n    }\n  };\n\n  const stop = () => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n    setIsStreaming(false);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!input.trim() || isStreaming) return;\n    const userInput = input;\n    setInput(\"\");\n    send(userInput);\n  };\n\n  return {\n    messages,\n    input,\n    setInput,\n    handleSubmit,\n    isStreaming,\n    stop,\n    send,\n    setMessages: (msgs: Message[]) => {\n      messagesRef.current = msgs;\n      setMessages(msgs);\n    },\n  };\n}\n","size_bytes":8742},"AZURE-STREAMING-FIX.md":{"content":"# 🔧 Azure OpenAI - Streaming Token-by-Token\n\n## Problem\nAzure Content Filter **domyślnie buforuje tokeny** zanim je wyśle, przez co streaming wygląda na \"paczki\" zamiast płynnego strumienia słowo po słowie.\n\n## Rozwiązanie: Asynchronous Filter\n\n### 1. Włącz w Azure Portal\n\n1. Wejdź na **Azure AI Studio** (https://ai.azure.com)\n2. Wybierz swój zasób OpenAI\n3. Idź do **Safety + Security** > **Content Filters**\n4. Utwórz nowy filtr lub edytuj istniejący\n5. W sekcji **Streaming mode** zmień z **\"Default\"** na **\"Asynchronous Filter\"**\n6. Zapisz i przypisz do swojego deploymentu\n\n### Co to daje?\n- ✅ **Tokeny płyną natychmiast** - bez buforowania\n- ✅ **Prawdziwy real-time streaming** - litera po literze\n- ✅ **Zero opóźnień** - filtr działa asynchronicznie w tle\n\n### Trade-off\n- ⚠️ Filtrowanie treści odbywa się **po** wysłaniu tokena\n- Szkodliwa treść może pojawić się na chwilę przed flagowaniem\n\n---\n\n## Kod - Już skonfigurowany ✅\n\n### API Version\n```typescript\nconst AZURE_API_VERSION = \"2024-12-01-preview\"; // ✅ Wspiera async streaming\n```\n\n### React - Zero Batching\n```typescript\nimport { flushSync } from \"react-dom\";\n\n// Każdy token renderuje się NATYCHMIAST\nflushSync(() => {\n  setMessages([...messagesRef.current]);\n});\n```\n\n### Backend - No Buffering\n```typescript\nexport const runtime = 'nodejs';\nexport const dynamic = 'force-dynamic';\nexport const revalidate = 0;\n\n// HTTP headers wymuszają zero cache\nheaders: {\n  'Cache-Control': 'no-cache, no-store, must-revalidate',\n  'X-Accel-Buffering': 'no',\n  'Connection': 'keep-alive'\n}\n```\n\n---\n\n## Testowanie\n\nPrzed włączeniem Asynchronous Filter:\n```\n[02:31:33.367Z] token\n[02:31:33.367Z] token  ← wszystkie w tej samej ms\n[02:31:33.367Z] token\n[02:31:34.240Z] token  ← kolejna paczka\n[02:31:34.240Z] token\n```\n\nPo włączeniu Asynchronous Filter:\n```\n[02:31:33.001Z] token\n[02:31:33.015Z] token  ← każdy osobno\n[02:31:33.032Z] token\n[02:31:33.047Z] token  ← płynny strumień\n```\n\n---\n\n## Dokumentacja Azure\n- [Content Streaming - Azure OpenAI](https://learn.microsoft.com/en-us/azure/ai-foundry/openai/concepts/content-streaming)\n- [Asynchronous Filter Guide](https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/content-filters)\n","size_bytes":2274}},"version":2}